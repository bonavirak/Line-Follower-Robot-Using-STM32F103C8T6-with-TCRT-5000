
car_manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005454  08005454  00007038  2**0
                  CONTENTS
  4 .ARM          00000000  08005454  08005454  00007038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005454  08005454  00007038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  0800545c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000038  08005494  00007038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005494  000071fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2d0  00000000  00000000  00007061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c24  00000000  00000000  00013331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00014f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2e  00000000  00000000  00015bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017607  00000000  00000000  0001661e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e066  00000000  00000000  0002dc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4af  00000000  00000000  0003bc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c613a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  000c6180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000c97e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08005410 	.word	0x08005410

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08005410 	.word	0x08005410

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Set_Servo_Angle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_Servo_Angle(uint8_t angle)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  // Map 0–180° to 500–2500us (pulse width in timer counts)
  uint16_t pulse_width = 500 + ((angle * 2000) / 180);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	4a09      	ldr	r2, [pc, #36]	@ (800077c <Set_Servo_Angle+0x3c>)
 8000756:	fb82 1203 	smull	r1, r2, r2, r3
 800075a:	441a      	add	r2, r3
 800075c:	11d2      	asrs	r2, r2, #7
 800075e:	17db      	asrs	r3, r3, #31
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	b29b      	uxth	r3, r3
 8000764:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000768:	81fb      	strh	r3, [r7, #14]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width);  // Set PWM pulse width
 800076a:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <Set_Servo_Angle+0x40>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	89fa      	ldrh	r2, [r7, #14]
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	b60b60b7 	.word	0xb60b60b7
 8000780:	2000009c 	.word	0x2000009c

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f002 f956 	bl	8002a38 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f832 	bl	80007f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 f9c8 	bl	8000b24 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000794:	f000 f938 	bl	8000a08 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000798:	f000 f99a 	bl	8000ad0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800079c:	f000 f8be 	bl	800091c <MX_TIM3_Init>
  MX_TIM2_Init();
 80007a0:	f000 f86e 	bl	8000880 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007a4:	2100      	movs	r1, #0
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <main+0x58>)
 80007a8:	f003 fa1e 	bl	8003be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80007ac:	2104      	movs	r1, #4
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <main+0x58>)
 80007b0:	f003 fa1a 	bl	8003be8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start PWM for servo
 80007b4:	2100      	movs	r1, #0
 80007b6:	480a      	ldr	r0, [pc, #40]	@ (80007e0 <main+0x5c>)
 80007b8:	f003 fa16 	bl	8003be8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80007bc:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <main+0x60>)
 80007be:	f003 f971 	bl	8003aa4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1); // Enable UART interrupt
 80007c2:	2201      	movs	r2, #1
 80007c4:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <main+0x64>)
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <main+0x68>)
 80007c8:	f004 f8be 	bl	8004948 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2102      	movs	r1, #2
 80007d0:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <main+0x6c>)
 80007d2:	f002 fcee 	bl	80031b2 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d6:	bf00      	nop
 80007d8:	e7fd      	b.n	80007d6 <main+0x52>
 80007da:	bf00      	nop
 80007dc:	200000e4 	.word	0x200000e4
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	20000054 	.word	0x20000054
 80007e8:	200001a8 	.word	0x200001a8
 80007ec:	2000012c 	.word	0x2000012c
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b090      	sub	sp, #64	@ 0x40
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	2228      	movs	r2, #40	@ 0x28
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f004 fdd8 	bl	80053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	2302      	movs	r3, #2
 800082a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000832:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fcd1 	bl	80031e4 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000848:	f001 ff30 	bl	80026ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 ff3e 	bl	80036e8 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000872:	f001 ff1b 	bl	80026ac <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	@ 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089c:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_TIM2_Init+0x98>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008a6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008b4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80008b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c6:	4814      	ldr	r0, [pc, #80]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008c8:	f003 f89c 	bl	8003a04 <HAL_TIM_Base_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008d2:	f001 feeb 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_TIM2_Init+0x98>)
 80008e4:	f003 fbd4 	bl	8004090 <HAL_TIM_ConfigClockSource>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008ee:	f001 fedd 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	@ (8000918 <MX_TIM2_Init+0x98>)
 8000900:	f003 ff62 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800090a:	f001 fecf 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000054 	.word	0x20000054

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 800094e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a04 <MX_TIM3_Init+0xe8>)
 8000950:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 8000954:	2247      	movs	r2, #71	@ 0x47
 8000956:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800095e:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 8000960:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000972:	4823      	ldr	r0, [pc, #140]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 8000974:	f003 f846 	bl	8003a04 <HAL_TIM_Base_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800097e:	f001 fe95 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000988:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800098c:	4619      	mov	r1, r3
 800098e:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 8000990:	f003 fb7e 	bl	8004090 <HAL_TIM_ConfigClockSource>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800099a:	f001 fe87 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 80009a0:	f003 f8d2 	bl	8003b48 <HAL_TIM_PWM_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009aa:	f001 fe7f 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	4619      	mov	r1, r3
 80009bc:	4810      	ldr	r0, [pc, #64]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 80009be:	f003 ff03 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009c8:	f001 fe70 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009cc:	2360      	movs	r3, #96	@ 0x60
 80009ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 80009e4:	f003 fa92 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009ee:	f001 fe5d 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f2:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <MX_TIM3_Init+0xe4>)
 80009f4:	f001 fef0 	bl	80027d8 <HAL_TIM_MspPostInit>

}
 80009f8:	bf00      	nop
 80009fa:	3738      	adds	r7, #56	@ 0x38
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000009c 	.word	0x2000009c
 8000a04:	40000400 	.word	0x40000400

08000a08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a2c:	4a27      	ldr	r2, [pc, #156]	@ (8000acc <MX_TIM4_Init+0xc4>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000a30:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a32:	2247      	movs	r2, #71	@ 0x47
 8000a34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a3e:	2263      	movs	r2, #99	@ 0x63
 8000a40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a4e:	481e      	ldr	r0, [pc, #120]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a50:	f003 f87a 	bl	8003b48 <HAL_TIM_PWM_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f001 fe27 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4816      	ldr	r0, [pc, #88]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a6e:	f003 feab 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000a78:	f001 fe18 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	@ 0x60
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000a94:	f003 fa3a 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a9e:	f001 fe05 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000aaa:	f003 fa2f 	bl	8003f0c <HAL_TIM_PWM_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ab4:	f001 fdfa 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <MX_TIM4_Init+0xc0>)
 8000aba:	f001 fe8d 	bl	80027d8 <HAL_TIM_MspPostInit>

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	@ 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000e4 	.word	0x200000e4
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_USART1_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000adc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART1_UART_Init+0x4c>)
 8000b08:	f003 fece 	bl	80048a8 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f001 fdcb 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000012c 	.word	0x2000012c
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	4b34      	ldr	r3, [pc, #208]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a33      	ldr	r2, [pc, #204]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b31      	ldr	r3, [pc, #196]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b50:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a2d      	ldr	r2, [pc, #180]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_GPIO_Init+0xe8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9e:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <MX_GPIO_Init+0xec>)
 8000ba0:	f002 fb07 	bl	80031b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f24f 0102 	movw	r1, #61442	@ 0xf002
 8000baa:	481a      	ldr	r0, [pc, #104]	@ (8000c14 <MX_GPIO_Init+0xf0>)
 8000bac:	f002 fb01 	bl	80031b2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4811      	ldr	r0, [pc, #68]	@ (8000c10 <MX_GPIO_Init+0xec>)
 8000bca:	f002 f957 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bce:	231f      	movs	r3, #31
 8000bd0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_GPIO_Init+0xf4>)
 8000be2:	f002 f94b 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000be6:	f24f 0302 	movw	r3, #61442	@ 0xf002
 8000bea:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_GPIO_Init+0xf0>)
 8000c00:	f002 f93c 	bl	8002e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40010800 	.word	0x40010800

08000c1c <set_left_motor>:
  * @brief Set speed and direction for the left motor
  * @param speed: Speed value (-95 to 95). Positive for forward, negative for backward.
  * @retval None
  */
void set_left_motor(int speed)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  speed = (speed > MAX_SPEED) ? MAX_SPEED : (speed < -MAX_SPEED/2) ? -MAX_SPEED/2 : speed;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b64      	cmp	r3, #100	@ 0x64
 8000c28:	dc06      	bgt.n	8000c38 <set_left_motor+0x1c>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8000c30:	4293      	cmp	r3, r2
 8000c32:	bfb8      	it	lt
 8000c34:	4613      	movlt	r3, r2
 8000c36:	e000      	b.n	8000c3a <set_left_motor+0x1e>
 8000c38:	2364      	movs	r3, #100	@ 0x64
 8000c3a:	607b      	str	r3, [r7, #4]
  TIM4->CCR2 = (speed >= 0) ? (uint32_t)speed : (uint32_t)(-speed);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c42:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <set_left_motor+0x60>)
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (speed > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bfcc      	ite	gt
 8000c50:	2301      	movgt	r3, #1
 8000c52:	2300      	movle	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c5c:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <set_left_motor+0x64>)
 8000c5e:	f002 faa8 	bl	80031b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (speed < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0fdb      	lsrs	r3, r3, #31
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <set_left_motor+0x64>)
 8000c70:	f002 fa9f 	bl	80031b2 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <set_right_motor>:
  * @brief Set speed and direction for the right motor
  * @param speed: Speed value (-95 to 95). Positive for forward, negative for backward.
  * @retval None
  */
void set_right_motor(int speed)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  speed = (speed > MAX_SPEED) ? MAX_SPEED : (speed < -MAX_SPEED/2) ? -MAX_SPEED/2 : speed;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b64      	cmp	r3, #100	@ 0x64
 8000c90:	dc06      	bgt.n	8000ca0 <set_right_motor+0x1c>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	bfb8      	it	lt
 8000c9c:	4613      	movlt	r3, r2
 8000c9e:	e000      	b.n	8000ca2 <set_right_motor+0x1e>
 8000ca0:	2364      	movs	r3, #100	@ 0x64
 8000ca2:	607b      	str	r3, [r7, #4]
  TIM4->CCR1 = (speed >= 0) ? (uint32_t)speed : (uint32_t)(-speed);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000caa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <set_right_motor+0x60>)
 8000cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (speed > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bfcc      	ite	gt
 8000cb8:	2301      	movgt	r3, #1
 8000cba:	2300      	movle	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc4:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <set_right_motor+0x64>)
 8000cc6:	f002 fa74 	bl	80031b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, (speed < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0fdb      	lsrs	r3, r3, #31
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cd6:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <set_right_motor+0x64>)
 8000cd8:	f002 fa6b 	bl	80031b2 <HAL_GPIO_WritePin>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <motor_ctr>:

void motor_ctr(int speedL, int speedR)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  set_right_motor(speedR);
 8000cf6:	6838      	ldr	r0, [r7, #0]
 8000cf8:	f7ff ffc4 	bl	8000c84 <set_right_motor>
  set_left_motor(speedL);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff8d 	bl	8000c1c <set_left_motor>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <read_sensors>:
/**
  * @brief Read sensor states
  * @retval None
  */
void read_sensors(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  sensor_values[0] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000d10:	2101      	movs	r1, #1
 8000d12:	4837      	ldr	r0, [pc, #220]	@ (8000df0 <read_sensors+0xe4>)
 8000d14:	f002 fa36 	bl	8003184 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bf0c      	ite	eq
 8000d1e:	2301      	moveq	r3, #1
 8000d20:	2300      	movne	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <read_sensors+0xe8>)
 8000d28:	701a      	strb	r2, [r3, #0]
  sensor_values[1] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4830      	ldr	r0, [pc, #192]	@ (8000df0 <read_sensors+0xe4>)
 8000d2e:	f002 fa29 	bl	8003184 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf0c      	ite	eq
 8000d38:	2301      	moveq	r3, #1
 8000d3a:	2300      	movne	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <read_sensors+0xe8>)
 8000d42:	705a      	strb	r2, [r3, #1]
  sensor_values[2] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000d44:	2104      	movs	r1, #4
 8000d46:	482a      	ldr	r0, [pc, #168]	@ (8000df0 <read_sensors+0xe4>)
 8000d48:	f002 fa1c 	bl	8003184 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf0c      	ite	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	2300      	movne	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <read_sensors+0xe8>)
 8000d5c:	709a      	strb	r2, [r3, #2]
  sensor_values[3] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000d5e:	2108      	movs	r1, #8
 8000d60:	4823      	ldr	r0, [pc, #140]	@ (8000df0 <read_sensors+0xe4>)
 8000d62:	f002 fa0f 	bl	8003184 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf0c      	ite	eq
 8000d6c:	2301      	moveq	r3, #1
 8000d6e:	2300      	movne	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <read_sensors+0xe8>)
 8000d76:	70da      	strb	r2, [r3, #3]
  sensor_values[4] = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000d78:	2110      	movs	r1, #16
 8000d7a:	481d      	ldr	r0, [pc, #116]	@ (8000df0 <read_sensors+0xe4>)
 8000d7c:	f002 fa02 	bl	8003184 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bf0c      	ite	eq
 8000d86:	2301      	moveq	r3, #1
 8000d88:	2300      	movne	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <read_sensors+0xe8>)
 8000d90:	711a      	strb	r2, [r3, #4]

  if (sensor_values[0] == 1) {
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <read_sensors+0xe8>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d103      	bne.n	8000da2 <read_sensors+0x96>
    j = 1;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <read_sensors+0xec>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e006      	b.n	8000db0 <read_sensors+0xa4>
  }
  else if (sensor_values[4] == 1) {
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <read_sensors+0xe8>)
 8000da4:	791b      	ldrb	r3, [r3, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <read_sensors+0xa4>
    j = 2;
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <read_sensors+0xec>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	601a      	str	r2, [r3, #0]
  }

  if (j == 1) {
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <read_sensors+0xec>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d103      	bne.n	8000dc0 <read_sensors+0xb4>
    sensor_values[0] = 1;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <read_sensors+0xe8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e006      	b.n	8000dce <read_sensors+0xc2>
  }
  else if (j == 2) {
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <read_sensors+0xec>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d102      	bne.n	8000dce <read_sensors+0xc2>
    sensor_values[4] = 1;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <read_sensors+0xe8>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	711a      	strb	r2, [r3, #4]
  }
  if (sensor_values[1] == 1 || sensor_values[2] == 1 || sensor_values[3] == 1) {
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <read_sensors+0xe8>)
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d007      	beq.n	8000de6 <read_sensors+0xda>
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <read_sensors+0xe8>)
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d003      	beq.n	8000de6 <read_sensors+0xda>
 8000dde:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <read_sensors+0xe8>)
 8000de0:	78db      	ldrb	r3, [r3, #3]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d102      	bne.n	8000dec <read_sensors+0xe0>
    j = 0;
 8000de6:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <read_sensors+0xec>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
  }
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010800 	.word	0x40010800
 8000df4:	20000188 	.word	0x20000188
 8000df8:	200001a4 	.word	0x200001a4

08000dfc <compute_position>:
/**
  * @brief Compute lateral position
  * @retval float: Position in mm
  */
float compute_position()
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
  int sum_s = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  int weighted_sum = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < 5; i++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	e018      	b.n	8000e42 <compute_position+0x46>
    sum_s += sensor_values[i];
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <compute_position+0x7c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
    weighted_sum += sensor_values[i] * weights[i];
 8000e20:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <compute_position+0x7c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <compute_position+0x80>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	fb01 f303 	mul.w	r3, r1, r3
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < 5; i++) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	dde3      	ble.n	8000e10 <compute_position+0x14>
  }

  if (sum_s == 0)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <compute_position+0x58>
    return 0.0; // No line detected, assume center or trigger fail-safe
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	e00c      	b.n	8000e6e <compute_position+0x72>

  return (float)weighted_sum / sum_s;
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f7ff fa33 	bl	80002c0 <__aeabi_i2f>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fa2f 	bl	80002c0 <__aeabi_i2f>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff fb32 	bl	80004d0 <__aeabi_fdiv>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000188 	.word	0x20000188
 8000e7c:	20000000 	.word	0x20000000

08000e80 <compute_pid>:
  * @brief Compute PID control output
  * @param error: Current error
  * @retval float: PID control output
  */
float compute_pid(float error)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  integral += error * dt;
 8000e88:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <compute_pid+0xa4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fa6a 	bl	8000368 <__aeabi_fmul>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <compute_pid+0xa8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	f7ff f95a 	bl	8000158 <__addsf3>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <compute_pid+0xa8>)
 8000eaa:	601a      	str	r2, [r3, #0]
  float derivative = (error - previous_error) / dt;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <compute_pid+0xac>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff f94e 	bl	8000154 <__aeabi_fsub>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <compute_pid+0xa4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f7ff fb04 	bl	80004d0 <__aeabi_fdiv>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60fb      	str	r3, [r7, #12]
  float output = Kp * error + Ki * integral + Kd * derivative;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <compute_pid+0xb0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa48 	bl	8000368 <__aeabi_fmul>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461c      	mov	r4, r3
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <compute_pid+0xb4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <compute_pid+0xa8>)
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fa3e 	bl	8000368 <__aeabi_fmul>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f7ff f931 	bl	8000158 <__addsf3>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461c      	mov	r4, r3
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <compute_pid+0xb8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fa31 	bl	8000368 <__aeabi_fmul>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f7ff f924 	bl	8000158 <__addsf3>
 8000f10:	4603      	mov	r3, r0
 8000f12:	60bb      	str	r3, [r7, #8]
  previous_error = error;
 8000f14:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <compute_pid+0xac>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  return output;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	20000020 	.word	0x20000020
 8000f28:	20000178 	.word	0x20000178
 8000f2c:	20000174 	.word	0x20000174
 8000f30:	20000014 	.word	0x20000014
 8000f34:	20000018 	.word	0x20000018
 8000f38:	2000001c 	.word	0x2000001c

08000f3c <followLine_Case0>:
  pwmR = basespeed - u;
  motor_ctr(pwmL, pwmR);
}

void followLine_Case0(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0


	Set_Servo_Angle(40);
 8000f42:	2028      	movs	r0, #40	@ 0x28
 8000f44:	f7ff fbfc 	bl	8000740 <Set_Servo_Angle>

	// Step 2: Initial forward push for 200ms (40 cycles at 5ms)
	    if (!case0_initial_push_done) {
 8000f48:	4b74      	ldr	r3, [pc, #464]	@ (800111c <followLine_Case0+0x1e0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d11e      	bne.n	8000f8e <followLine_Case0+0x52>
	        pwmL = 50; // Fixed speed for forward push
 8000f50:	4b73      	ldr	r3, [pc, #460]	@ (8001120 <followLine_Case0+0x1e4>)
 8000f52:	2232      	movs	r2, #50	@ 0x32
 8000f54:	601a      	str	r2, [r3, #0]
	        pwmR = 50;
 8000f56:	4b73      	ldr	r3, [pc, #460]	@ (8001124 <followLine_Case0+0x1e8>)
 8000f58:	2232      	movs	r2, #50	@ 0x32
 8000f5a:	601a      	str	r2, [r3, #0]
	        motor_ctr(pwmL, pwmR);
 8000f5c:	4b70      	ldr	r3, [pc, #448]	@ (8001120 <followLine_Case0+0x1e4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a70      	ldr	r2, [pc, #448]	@ (8001124 <followLine_Case0+0x1e8>)
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fec0 	bl	8000cec <motor_ctr>
	        case0_initial_push_count++;
 8000f6c:	4b6e      	ldr	r3, [pc, #440]	@ (8001128 <followLine_Case0+0x1ec>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a6d      	ldr	r2, [pc, #436]	@ (8001128 <followLine_Case0+0x1ec>)
 8000f74:	6013      	str	r3, [r2, #0]
	        if (case0_initial_push_count >= 40) { // 200ms / 5ms = 40 cycles
 8000f76:	4b6c      	ldr	r3, [pc, #432]	@ (8001128 <followLine_Case0+0x1ec>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b27      	cmp	r3, #39	@ 0x27
 8000f7c:	f340 80ca 	ble.w	8001114 <followLine_Case0+0x1d8>
	            case0_initial_push_done = 1; // Mark push as complete
 8000f80:	4b66      	ldr	r3, [pc, #408]	@ (800111c <followLine_Case0+0x1e0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
	            case0_initial_push_count = 0; // Reset counter for potential reuse
 8000f86:	4b68      	ldr	r3, [pc, #416]	@ (8001128 <followLine_Case0+0x1ec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
	        }
	        return; // Exit function until push is complete
 8000f8c:	e0c2      	b.n	8001114 <followLine_Case0+0x1d8>
	    }

  x = compute_position();
 8000f8e:	f7ff ff35 	bl	8000dfc <compute_position>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a65      	ldr	r2, [pc, #404]	@ (800112c <followLine_Case0+0x1f0>)
 8000f96:	6013      	str	r3, [r2, #0]
  u = compute_pid(x);
 8000f98:	4b64      	ldr	r3, [pc, #400]	@ (800112c <followLine_Case0+0x1f0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff6f 	bl	8000e80 <compute_pid>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a62      	ldr	r2, [pc, #392]	@ (8001130 <followLine_Case0+0x1f4>)
 8000fa6:	6013      	str	r3, [r2, #0]
  if (fabs(x) < 1) {
 8000fa8:	4b60      	ldr	r3, [pc, #384]	@ (800112c <followLine_Case0+0x1f0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fb0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fb75 	bl	80006a4 <__aeabi_fcmplt>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <followLine_Case0+0x8c>
    basespeed = 55;
 8000fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8001134 <followLine_Case0+0x1f8>)
 8000fc2:	2237      	movs	r2, #55	@ 0x37
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e01e      	b.n	8001006 <followLine_Case0+0xca>
  } else if (fabs(x) <= 2) {
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <followLine_Case0+0x1f0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fd0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb6f 	bl	80006b8 <__aeabi_fcmple>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <followLine_Case0+0xac>
    basespeed = 37;
 8000fe0:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <followLine_Case0+0x1f8>)
 8000fe2:	2225      	movs	r2, #37	@ 0x25
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e00e      	b.n	8001006 <followLine_Case0+0xca>
  } else if (fabs(x) <= 4) {
 8000fe8:	4b50      	ldr	r3, [pc, #320]	@ (800112c <followLine_Case0+0x1f0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ff0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fb5f 	bl	80006b8 <__aeabi_fcmple>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <followLine_Case0+0xca>
    basespeed = 25
 8001000:	4b4c      	ldr	r3, [pc, #304]	@ (8001134 <followLine_Case0+0x1f8>)
 8001002:	2219      	movs	r2, #25
 8001004:	601a      	str	r2, [r3, #0]
    		;
  }

  int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 8001006:	4b4c      	ldr	r3, [pc, #304]	@ (8001138 <followLine_Case0+0x1fc>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b4a      	ldr	r3, [pc, #296]	@ (8001138 <followLine_Case0+0x1fc>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	4413      	add	r3, r2
 8001012:	4a49      	ldr	r2, [pc, #292]	@ (8001138 <followLine_Case0+0x1fc>)
 8001014:	7892      	ldrb	r2, [r2, #2]
 8001016:	4413      	add	r3, r2
 8001018:	4a47      	ldr	r2, [pc, #284]	@ (8001138 <followLine_Case0+0x1fc>)
 800101a:	78d2      	ldrb	r2, [r2, #3]
 800101c:	4413      	add	r3, r2
 800101e:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <followLine_Case0+0x1fc>)
 8001020:	7912      	ldrb	r2, [r2, #4]
 8001022:	4413      	add	r3, r2
 8001024:	607b      	str	r3, [r7, #4]
  if (!has_grabbed) {
 8001026:	4b45      	ldr	r3, [pc, #276]	@ (800113c <followLine_Case0+0x200>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d143      	bne.n	80010b6 <followLine_Case0+0x17a>
    if (sensor_values[0] == 1 && sensor_values[1] == 1 && sensor_values[2] == 1 && sensor_values[3] == 1) {
 800102e:	4b42      	ldr	r3, [pc, #264]	@ (8001138 <followLine_Case0+0x1fc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d115      	bne.n	8001062 <followLine_Case0+0x126>
 8001036:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <followLine_Case0+0x1fc>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d111      	bne.n	8001062 <followLine_Case0+0x126>
 800103e:	4b3e      	ldr	r3, [pc, #248]	@ (8001138 <followLine_Case0+0x1fc>)
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d10d      	bne.n	8001062 <followLine_Case0+0x126>
 8001046:	4b3c      	ldr	r3, [pc, #240]	@ (8001138 <followLine_Case0+0x1fc>)
 8001048:	78db      	ldrb	r3, [r3, #3]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d109      	bne.n	8001062 <followLine_Case0+0x126>
      Set_Servo_Angle(0); // Grab to 0°
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fb76 	bl	8000740 <Set_Servo_Angle>
      has_grabbed = 1;    // Prevent further servo commands
 8001054:	4b39      	ldr	r3, [pc, #228]	@ (800113c <followLine_Case0+0x200>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]
      current_case = 1;
 800105a:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <followLine_Case0+0x204>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e029      	b.n	80010b6 <followLine_Case0+0x17a>
    } else if (sensor_values[4] == 1 && sensor_values[3] == 1 && sensor_values[2] == 1 && sensor_values[1] == 1) {
 8001062:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <followLine_Case0+0x1fc>)
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d115      	bne.n	8001096 <followLine_Case0+0x15a>
 800106a:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <followLine_Case0+0x1fc>)
 800106c:	78db      	ldrb	r3, [r3, #3]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d111      	bne.n	8001096 <followLine_Case0+0x15a>
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <followLine_Case0+0x1fc>)
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10d      	bne.n	8001096 <followLine_Case0+0x15a>
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <followLine_Case0+0x1fc>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d109      	bne.n	8001096 <followLine_Case0+0x15a>
      Set_Servo_Angle(0); // Grab to 0°
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fb5c 	bl	8000740 <Set_Servo_Angle>
      has_grabbed = 1;    // Prevent further servo commands
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <followLine_Case0+0x200>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
      current_case = 1;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <followLine_Case0+0x204>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e00f      	b.n	80010b6 <followLine_Case0+0x17a>
    } else if (sensor_sum == 5 && sensor_values[2] == 1) { // Ensure center sensor is off too
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d10c      	bne.n	80010b6 <followLine_Case0+0x17a>
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <followLine_Case0+0x1fc>)
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <followLine_Case0+0x17a>
      Set_Servo_Angle(0); // Grab to 0°
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff fb4b 	bl	8000740 <Set_Servo_Angle>
      has_grabbed = 1;    // Prevent further servo commands
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <followLine_Case0+0x200>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
      current_case = 1;
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <followLine_Case0+0x204>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
    }
  }

  pwmL = basespeed + u;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <followLine_Case0+0x1f8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f900 	bl	80002c0 <__aeabi_i2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <followLine_Case0+0x1f4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4610      	mov	r0, r2
 80010ca:	f7ff f845 	bl	8000158 <__addsf3>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fb0f 	bl	80006f4 <__aeabi_f2iz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <followLine_Case0+0x1e4>)
 80010da:	6013      	str	r3, [r2, #0]
  pwmR = basespeed - u;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <followLine_Case0+0x1f8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f8ed 	bl	80002c0 <__aeabi_i2f>
 80010e6:	4602      	mov	r2, r0
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <followLine_Case0+0x1f4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4610      	mov	r0, r2
 80010f0:	f7ff f830 	bl	8000154 <__aeabi_fsub>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fafc 	bl	80006f4 <__aeabi_f2iz>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <followLine_Case0+0x1e8>)
 8001100:	6013      	str	r3, [r2, #0]
  motor_ctr(pwmL, pwmR);
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <followLine_Case0+0x1e4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <followLine_Case0+0x1e8>)
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fded 	bl	8000cec <motor_ctr>
 8001112:	e000      	b.n	8001116 <followLine_Case0+0x1da>
	        return; // Exit function until push is complete
 8001114:	bf00      	nop
}
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001e0 	.word	0x200001e0
 8001120:	20000198 	.word	0x20000198
 8001124:	2000019c 	.word	0x2000019c
 8001128:	200001dc 	.word	0x200001dc
 800112c:	20000190 	.word	0x20000190
 8001130:	20000194 	.word	0x20000194
 8001134:	200001a0 	.word	0x200001a0
 8001138:	20000188 	.word	0x20000188
 800113c:	2000017c 	.word	0x2000017c
 8001140:	20000180 	.word	0x20000180

08001144 <followLine_Case1>:

void followLine_Case1(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  // Set new PID values for Case 1
  Kp = 15;
 800114a:	4b61      	ldr	r3, [pc, #388]	@ (80012d0 <followLine_Case1+0x18c>)
 800114c:	4a61      	ldr	r2, [pc, #388]	@ (80012d4 <followLine_Case1+0x190>)
 800114e:	601a      	str	r2, [r3, #0]
  Ki = 0.0;
 8001150:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <followLine_Case1+0x194>)
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
  Kd = 0.0;
 8001158:	4b60      	ldr	r3, [pc, #384]	@ (80012dc <followLine_Case1+0x198>)
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  // Reset PID state
  integral = 0;
 8001160:	4b5f      	ldr	r3, [pc, #380]	@ (80012e0 <followLine_Case1+0x19c>)
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  previous_error = 0;
 8001168:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <followLine_Case1+0x1a0>)
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

  // Step 1: Forward push for 200ms (40 cycles at 5ms) after grabbing
      if (!case1_push_after_grab_done) {
 8001170:	4b5d      	ldr	r3, [pc, #372]	@ (80012e8 <followLine_Case1+0x1a4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d11d      	bne.n	80011b4 <followLine_Case1+0x70>
          if (case1_delay_count < 110) {
 8001178:	4b5c      	ldr	r3, [pc, #368]	@ (80012ec <followLine_Case1+0x1a8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b6d      	cmp	r3, #109	@ 0x6d
 800117e:	dc13      	bgt.n	80011a8 <followLine_Case1+0x64>
              pwmL = 30; // Fixed speed for forward push
 8001180:	4b5b      	ldr	r3, [pc, #364]	@ (80012f0 <followLine_Case1+0x1ac>)
 8001182:	221e      	movs	r2, #30
 8001184:	601a      	str	r2, [r3, #0]
              pwmR = 30;
 8001186:	4b5b      	ldr	r3, [pc, #364]	@ (80012f4 <followLine_Case1+0x1b0>)
 8001188:	221e      	movs	r2, #30
 800118a:	601a      	str	r2, [r3, #0]
              motor_ctr(pwmL, pwmR);
 800118c:	4b58      	ldr	r3, [pc, #352]	@ (80012f0 <followLine_Case1+0x1ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a58      	ldr	r2, [pc, #352]	@ (80012f4 <followLine_Case1+0x1b0>)
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fda8 	bl	8000cec <motor_ctr>
              case1_delay_count++;
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <followLine_Case1+0x1a8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <followLine_Case1+0x1a8>)
 80011a4:	6013      	str	r3, [r2, #0]
              return; // Exit until push is complete
 80011a6:	e08f      	b.n	80012c8 <followLine_Case1+0x184>
          } else {
              case1_push_after_grab_done = 1; // Mark push as complete
 80011a8:	4b4f      	ldr	r3, [pc, #316]	@ (80012e8 <followLine_Case1+0x1a4>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
              case1_delay_count = 0; // Reset counter for next phase
 80011ae:	4b4f      	ldr	r3, [pc, #316]	@ (80012ec <followLine_Case1+0x1a8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
          }
      }

  x = compute_position();
 80011b4:	f7ff fe22 	bl	8000dfc <compute_position>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a4f      	ldr	r2, [pc, #316]	@ (80012f8 <followLine_Case1+0x1b4>)
 80011bc:	6013      	str	r3, [r2, #0]
  u = compute_pid(x);
 80011be:	4b4e      	ldr	r3, [pc, #312]	@ (80012f8 <followLine_Case1+0x1b4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fe5c 	bl	8000e80 <compute_pid>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <followLine_Case1+0x1b8>)
 80011cc:	6013      	str	r3, [r2, #0]
  if (fabs(x) < 1) {
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <followLine_Case1+0x1b4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fa62 	bl	80006a4 <__aeabi_fcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <followLine_Case1+0xaa>
    basespeed = 40;
 80011e6:	4b46      	ldr	r3, [pc, #280]	@ (8001300 <followLine_Case1+0x1bc>)
 80011e8:	2228      	movs	r2, #40	@ 0x28
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e01e      	b.n	800122c <followLine_Case1+0xe8>
  } else if (fabs(x) <= 2) {
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <followLine_Case1+0x1b4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fa5c 	bl	80006b8 <__aeabi_fcmple>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <followLine_Case1+0xca>
    basespeed = 38;
 8001206:	4b3e      	ldr	r3, [pc, #248]	@ (8001300 <followLine_Case1+0x1bc>)
 8001208:	2226      	movs	r2, #38	@ 0x26
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e00e      	b.n	800122c <followLine_Case1+0xe8>
  } else if (fabs(x) <= 4) {
 800120e:	4b3a      	ldr	r3, [pc, #232]	@ (80012f8 <followLine_Case1+0x1b4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001216:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fa4c 	bl	80006b8 <__aeabi_fcmple>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <followLine_Case1+0xe8>
    basespeed = 40;
 8001226:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <followLine_Case1+0x1bc>)
 8001228:	2228      	movs	r2, #40	@ 0x28
 800122a:	601a      	str	r2, [r3, #0]
  }

  int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 800122c:	4b35      	ldr	r3, [pc, #212]	@ (8001304 <followLine_Case1+0x1c0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <followLine_Case1+0x1c0>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	4413      	add	r3, r2
 8001238:	4a32      	ldr	r2, [pc, #200]	@ (8001304 <followLine_Case1+0x1c0>)
 800123a:	7892      	ldrb	r2, [r2, #2]
 800123c:	4413      	add	r3, r2
 800123e:	4a31      	ldr	r2, [pc, #196]	@ (8001304 <followLine_Case1+0x1c0>)
 8001240:	78d2      	ldrb	r2, [r2, #3]
 8001242:	4413      	add	r3, r2
 8001244:	4a2f      	ldr	r2, [pc, #188]	@ (8001304 <followLine_Case1+0x1c0>)
 8001246:	7912      	ldrb	r2, [r2, #4]
 8001248:	4413      	add	r3, r2
 800124a:	607b      	str	r3, [r7, #4]

  // Ignore sensor_sum == 5 for 500ms (100 cycles * 5ms)
  if (case1_delay_count < 100) {
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <followLine_Case1+0x1a8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b63      	cmp	r3, #99	@ 0x63
 8001252:	dc05      	bgt.n	8001260 <followLine_Case1+0x11c>
	  case1_delay_count++;
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <followLine_Case1+0x1a8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <followLine_Case1+0x1a8>)
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e005      	b.n	800126c <followLine_Case1+0x128>
  } else if (sensor_sum == 4) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b04      	cmp	r3, #4
 8001264:	d102      	bne.n	800126c <followLine_Case1+0x128>
    current_case = 2;  // Move to Case 2 when all sensors detect the line
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <followLine_Case1+0x1c4>)
 8001268:	2202      	movs	r2, #2
 800126a:	601a      	str	r2, [r3, #0]
  }

  pwmL = basespeed + u;
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <followLine_Case1+0x1bc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f825 	bl	80002c0 <__aeabi_i2f>
 8001276:	4602      	mov	r2, r0
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <followLine_Case1+0x1b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f7fe ff6a 	bl	8000158 <__addsf3>
 8001284:	4603      	mov	r3, r0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fa34 	bl	80006f4 <__aeabi_f2iz>
 800128c:	4603      	mov	r3, r0
 800128e:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <followLine_Case1+0x1ac>)
 8001290:	6013      	str	r3, [r2, #0]
  pwmR = basespeed - u;
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <followLine_Case1+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f812 	bl	80002c0 <__aeabi_i2f>
 800129c:	4602      	mov	r2, r0
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <followLine_Case1+0x1b8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4610      	mov	r0, r2
 80012a6:	f7fe ff55 	bl	8000154 <__aeabi_fsub>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fa21 	bl	80006f4 <__aeabi_f2iz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <followLine_Case1+0x1b0>)
 80012b6:	6013      	str	r3, [r2, #0]
  motor_ctr(pwmL, pwmR);
 80012b8:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <followLine_Case1+0x1ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <followLine_Case1+0x1b0>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fd12 	bl	8000cec <motor_ctr>
}
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000014 	.word	0x20000014
 80012d4:	41700000 	.word	0x41700000
 80012d8:	20000018 	.word	0x20000018
 80012dc:	2000001c 	.word	0x2000001c
 80012e0:	20000178 	.word	0x20000178
 80012e4:	20000174 	.word	0x20000174
 80012e8:	200001e4 	.word	0x200001e4
 80012ec:	200001ac 	.word	0x200001ac
 80012f0:	20000198 	.word	0x20000198
 80012f4:	2000019c 	.word	0x2000019c
 80012f8:	20000190 	.word	0x20000190
 80012fc:	20000194 	.word	0x20000194
 8001300:	200001a0 	.word	0x200001a0
 8001304:	20000188 	.word	0x20000188
 8001308:	20000180 	.word	0x20000180

0800130c <followLine_Case2>:

// Modified followLine_Case2 function
void followLine_Case2(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  if (!case2_stopped) {
 8001312:	4b9c      	ldr	r3, [pc, #624]	@ (8001584 <followLine_Case2+0x278>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 80ea 	bne.w	80014f0 <followLine_Case2+0x1e4>
    Kp = 2.5;
 800131c:	4b9a      	ldr	r3, [pc, #616]	@ (8001588 <followLine_Case2+0x27c>)
 800131e:	4a9b      	ldr	r2, [pc, #620]	@ (800158c <followLine_Case2+0x280>)
 8001320:	601a      	str	r2, [r3, #0]
    Ki = 0.0;
 8001322:	4b9b      	ldr	r3, [pc, #620]	@ (8001590 <followLine_Case2+0x284>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
    Kd = 0.0;
 800132a:	4b9a      	ldr	r3, [pc, #616]	@ (8001594 <followLine_Case2+0x288>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
    integral = 0;
 8001332:	4b99      	ldr	r3, [pc, #612]	@ (8001598 <followLine_Case2+0x28c>)
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
    previous_error = 0;
 800133a:	4b98      	ldr	r3, [pc, #608]	@ (800159c <followLine_Case2+0x290>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	601a      	str	r2, [r3, #0]

    x = compute_position();
 8001342:	f7ff fd5b 	bl	8000dfc <compute_position>
 8001346:	4603      	mov	r3, r0
 8001348:	4a95      	ldr	r2, [pc, #596]	@ (80015a0 <followLine_Case2+0x294>)
 800134a:	6013      	str	r3, [r2, #0]
    u = compute_pid(x);
 800134c:	4b94      	ldr	r3, [pc, #592]	@ (80015a0 <followLine_Case2+0x294>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd95 	bl	8000e80 <compute_pid>
 8001356:	4603      	mov	r3, r0
 8001358:	4a92      	ldr	r2, [pc, #584]	@ (80015a4 <followLine_Case2+0x298>)
 800135a:	6013      	str	r3, [r2, #0]
    if (fabs(x) < 1) {
 800135c:	4b90      	ldr	r3, [pc, #576]	@ (80015a0 <followLine_Case2+0x294>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001364:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f99b 	bl	80006a4 <__aeabi_fcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <followLine_Case2+0x70>
      basespeed = 40;
 8001374:	4b8c      	ldr	r3, [pc, #560]	@ (80015a8 <followLine_Case2+0x29c>)
 8001376:	2228      	movs	r2, #40	@ 0x28
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e01e      	b.n	80013ba <followLine_Case2+0xae>
    } else if (fabs(x) <= 2) {
 800137c:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <followLine_Case2+0x294>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001384:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f995 	bl	80006b8 <__aeabi_fcmple>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <followLine_Case2+0x90>
      basespeed = 40;
 8001394:	4b84      	ldr	r3, [pc, #528]	@ (80015a8 <followLine_Case2+0x29c>)
 8001396:	2228      	movs	r2, #40	@ 0x28
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00e      	b.n	80013ba <followLine_Case2+0xae>
    } else if (fabs(x) <= 4) {
 800139c:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <followLine_Case2+0x294>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013a4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f985 	bl	80006b8 <__aeabi_fcmple>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <followLine_Case2+0xae>
      basespeed = 40;
 80013b4:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <followLine_Case2+0x29c>)
 80013b6:	2228      	movs	r2, #40	@ 0x28
 80013b8:	601a      	str	r2, [r3, #0]
    }

    int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 80013ba:	4b7c      	ldr	r3, [pc, #496]	@ (80015ac <followLine_Case2+0x2a0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b7a      	ldr	r3, [pc, #488]	@ (80015ac <followLine_Case2+0x2a0>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a79      	ldr	r2, [pc, #484]	@ (80015ac <followLine_Case2+0x2a0>)
 80013c8:	7892      	ldrb	r2, [r2, #2]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a77      	ldr	r2, [pc, #476]	@ (80015ac <followLine_Case2+0x2a0>)
 80013ce:	78d2      	ldrb	r2, [r2, #3]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a76      	ldr	r2, [pc, #472]	@ (80015ac <followLine_Case2+0x2a0>)
 80013d4:	7912      	ldrb	r2, [r2, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	607b      	str	r3, [r7, #4]

    if (case2_ignore_count < 40) {
 80013da:	4b75      	ldr	r3, [pc, #468]	@ (80015b0 <followLine_Case2+0x2a4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b27      	cmp	r3, #39	@ 0x27
 80013e0:	dc33      	bgt.n	800144a <followLine_Case2+0x13e>
      case2_ignore_count++;
 80013e2:	4b73      	ldr	r3, [pc, #460]	@ (80015b0 <followLine_Case2+0x2a4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a71      	ldr	r2, [pc, #452]	@ (80015b0 <followLine_Case2+0x2a4>)
 80013ea:	6013      	str	r3, [r2, #0]
      pwmL = basespeed + u;
 80013ec:	4b6e      	ldr	r3, [pc, #440]	@ (80015a8 <followLine_Case2+0x29c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe ff65 	bl	80002c0 <__aeabi_i2f>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b6a      	ldr	r3, [pc, #424]	@ (80015a4 <followLine_Case2+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f7fe feaa 	bl	8000158 <__addsf3>
 8001404:	4603      	mov	r3, r0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f974 	bl	80006f4 <__aeabi_f2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	4a69      	ldr	r2, [pc, #420]	@ (80015b4 <followLine_Case2+0x2a8>)
 8001410:	6013      	str	r3, [r2, #0]
      pwmR = basespeed - u;
 8001412:	4b65      	ldr	r3, [pc, #404]	@ (80015a8 <followLine_Case2+0x29c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe ff52 	bl	80002c0 <__aeabi_i2f>
 800141c:	4602      	mov	r2, r0
 800141e:	4b61      	ldr	r3, [pc, #388]	@ (80015a4 <followLine_Case2+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7fe fe95 	bl	8000154 <__aeabi_fsub>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f961 	bl	80006f4 <__aeabi_f2iz>
 8001432:	4603      	mov	r3, r0
 8001434:	4a60      	ldr	r2, [pc, #384]	@ (80015b8 <followLine_Case2+0x2ac>)
 8001436:	6013      	str	r3, [r2, #0]
      motor_ctr(pwmL, pwmR);
 8001438:	4b5e      	ldr	r3, [pc, #376]	@ (80015b4 <followLine_Case2+0x2a8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a5e      	ldr	r2, [pc, #376]	@ (80015b8 <followLine_Case2+0x2ac>)
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc52 	bl	8000cec <motor_ctr>
        pwmR = 0;
        motor_ctr(pwmL, pwmR);
      }
    }
  }
}
 8001448:	e11d      	b.n	8001686 <followLine_Case2+0x37a>
      if (sensor_sum == 5 && !case2_stopped) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b05      	cmp	r3, #5
 800144e:	d11b      	bne.n	8001488 <followLine_Case2+0x17c>
 8001450:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <followLine_Case2+0x278>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d117      	bne.n	8001488 <followLine_Case2+0x17c>
        case2_stopped = 1;
 8001458:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <followLine_Case2+0x278>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 800145e:	4b55      	ldr	r3, [pc, #340]	@ (80015b4 <followLine_Case2+0x2a8>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 8001464:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <followLine_Case2+0x2ac>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 800146a:	4b52      	ldr	r3, [pc, #328]	@ (80015b4 <followLine_Case2+0x2a8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a52      	ldr	r2, [pc, #328]	@ (80015b8 <followLine_Case2+0x2ac>)
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc39 	bl	8000cec <motor_ctr>
        case2_post_stop_state = 1;
 800147a:	4b50      	ldr	r3, [pc, #320]	@ (80015bc <followLine_Case2+0x2b0>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 8001480:	4b4f      	ldr	r3, [pc, #316]	@ (80015c0 <followLine_Case2+0x2b4>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	e0fe      	b.n	8001686 <followLine_Case2+0x37a>
      } else if (!case2_stopped) {
 8001488:	4b3e      	ldr	r3, [pc, #248]	@ (8001584 <followLine_Case2+0x278>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f040 80fa 	bne.w	8001686 <followLine_Case2+0x37a>
        pwmL = basespeed + u;
 8001492:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <followLine_Case2+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ff12 	bl	80002c0 <__aeabi_i2f>
 800149c:	4602      	mov	r2, r0
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <followLine_Case2+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7fe fe57 	bl	8000158 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f921 	bl	80006f4 <__aeabi_f2iz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a3f      	ldr	r2, [pc, #252]	@ (80015b4 <followLine_Case2+0x2a8>)
 80014b6:	6013      	str	r3, [r2, #0]
        pwmR = basespeed - u;
 80014b8:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <followLine_Case2+0x29c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe feff 	bl	80002c0 <__aeabi_i2f>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <followLine_Case2+0x298>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7fe fe42 	bl	8000154 <__aeabi_fsub>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f90e 	bl	80006f4 <__aeabi_f2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a37      	ldr	r2, [pc, #220]	@ (80015b8 <followLine_Case2+0x2ac>)
 80014dc:	6013      	str	r3, [r2, #0]
        motor_ctr(pwmL, pwmR);
 80014de:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <followLine_Case2+0x2a8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a35      	ldr	r2, [pc, #212]	@ (80015b8 <followLine_Case2+0x2ac>)
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbff 	bl	8000cec <motor_ctr>
}
 80014ee:	e0ca      	b.n	8001686 <followLine_Case2+0x37a>
    if (case2_post_stop_state == 1) {
 80014f0:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <followLine_Case2+0x2b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d12c      	bne.n	8001552 <followLine_Case2+0x246>
      pwmL = 25;
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <followLine_Case2+0x2a8>)
 80014fa:	2219      	movs	r2, #25
 80014fc:	601a      	str	r2, [r3, #0]
      pwmR = 25;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <followLine_Case2+0x2ac>)
 8001500:	2219      	movs	r2, #25
 8001502:	601a      	str	r2, [r3, #0]
      motor_ctr(pwmL, pwmR);
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <followLine_Case2+0x2a8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2b      	ldr	r2, [pc, #172]	@ (80015b8 <followLine_Case2+0x2ac>)
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fbec 	bl	8000cec <motor_ctr>
      case2_post_action_count++;
 8001514:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <followLine_Case2+0x2b4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a29      	ldr	r2, [pc, #164]	@ (80015c0 <followLine_Case2+0x2b4>)
 800151c:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 70) {
 800151e:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <followLine_Case2+0x2b4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b45      	cmp	r3, #69	@ 0x45
 8001524:	f340 80af 	ble.w	8001686 <followLine_Case2+0x37a>
        case2_post_stop_state = 2;
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <followLine_Case2+0x2b0>)
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <followLine_Case2+0x2b4>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <followLine_Case2+0x2a8>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <followLine_Case2+0x2ac>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <followLine_Case2+0x2a8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <followLine_Case2+0x2ac>)
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbce 	bl	8000cec <motor_ctr>
}
 8001550:	e099      	b.n	8001686 <followLine_Case2+0x37a>
    } else if (case2_post_stop_state == 2) {
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <followLine_Case2+0x2b0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d134      	bne.n	80015c4 <followLine_Case2+0x2b8>
      Set_Servo_Angle(40);
 800155a:	2028      	movs	r0, #40	@ 0x28
 800155c:	f7ff f8f0 	bl	8000740 <Set_Servo_Angle>
      case2_post_action_count++;
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <followLine_Case2+0x2b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a16      	ldr	r2, [pc, #88]	@ (80015c0 <followLine_Case2+0x2b4>)
 8001568:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 20) {
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <followLine_Case2+0x2b4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b13      	cmp	r3, #19
 8001570:	f340 8089 	ble.w	8001686 <followLine_Case2+0x37a>
        case2_post_stop_state = 3;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <followLine_Case2+0x2b0>)
 8001576:	2203      	movs	r2, #3
 8001578:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <followLine_Case2+0x2b4>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	e081      	b.n	8001686 <followLine_Case2+0x37a>
 8001582:	bf00      	nop
 8001584:	200001b0 	.word	0x200001b0
 8001588:	20000014 	.word	0x20000014
 800158c:	40200000 	.word	0x40200000
 8001590:	20000018 	.word	0x20000018
 8001594:	2000001c 	.word	0x2000001c
 8001598:	20000178 	.word	0x20000178
 800159c:	20000174 	.word	0x20000174
 80015a0:	20000190 	.word	0x20000190
 80015a4:	20000194 	.word	0x20000194
 80015a8:	200001a0 	.word	0x200001a0
 80015ac:	20000188 	.word	0x20000188
 80015b0:	200001b4 	.word	0x200001b4
 80015b4:	20000198 	.word	0x20000198
 80015b8:	2000019c 	.word	0x2000019c
 80015bc:	200001b8 	.word	0x200001b8
 80015c0:	200001bc 	.word	0x200001bc
    } else if (case2_post_stop_state == 3) {
 80015c4:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <followLine_Case2+0x384>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d12d      	bne.n	8001628 <followLine_Case2+0x31c>
      pwmL = -35;
 80015cc:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <followLine_Case2+0x388>)
 80015ce:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015d2:	601a      	str	r2, [r3, #0]
      pwmR = -35;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <followLine_Case2+0x38c>)
 80015d6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015da:	601a      	str	r2, [r3, #0]
      motor_ctr(pwmL, pwmR);
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <followLine_Case2+0x388>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001698 <followLine_Case2+0x38c>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb80 	bl	8000cec <motor_ctr>
      case2_post_action_count++;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <followLine_Case2+0x390>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a2a      	ldr	r2, [pc, #168]	@ (800169c <followLine_Case2+0x390>)
 80015f4:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 145) {
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <followLine_Case2+0x390>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b90      	cmp	r3, #144	@ 0x90
 80015fc:	dd43      	ble.n	8001686 <followLine_Case2+0x37a>
        case2_post_stop_state = 4;
 80015fe:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <followLine_Case2+0x384>)
 8001600:	2204      	movs	r2, #4
 8001602:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <followLine_Case2+0x390>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <followLine_Case2+0x388>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 8001610:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <followLine_Case2+0x38c>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <followLine_Case2+0x388>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1f      	ldr	r2, [pc, #124]	@ (8001698 <followLine_Case2+0x38c>)
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb63 	bl	8000cec <motor_ctr>
}
 8001626:	e02e      	b.n	8001686 <followLine_Case2+0x37a>
    } else if (case2_post_stop_state == 4) {
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <followLine_Case2+0x384>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b04      	cmp	r3, #4
 800162e:	d12a      	bne.n	8001686 <followLine_Case2+0x37a>
      pwmL = 70;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <followLine_Case2+0x388>)
 8001632:	2246      	movs	r2, #70	@ 0x46
 8001634:	601a      	str	r2, [r3, #0]
      pwmR = 30;
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <followLine_Case2+0x38c>)
 8001638:	221e      	movs	r2, #30
 800163a:	601a      	str	r2, [r3, #0]
      motor_ctr(pwmL, pwmR);
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <followLine_Case2+0x388>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <followLine_Case2+0x38c>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb50 	bl	8000cec <motor_ctr>
      case2_post_action_count++;
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <followLine_Case2+0x390>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	4a12      	ldr	r2, [pc, #72]	@ (800169c <followLine_Case2+0x390>)
 8001654:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 100) {
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <followLine_Case2+0x390>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b63      	cmp	r3, #99	@ 0x63
 800165c:	dd13      	ble.n	8001686 <followLine_Case2+0x37a>
        case2_post_stop_state = 5;
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <followLine_Case2+0x384>)
 8001660:	2205      	movs	r2, #5
 8001662:	601a      	str	r2, [r3, #0]
        current_case = 3;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <followLine_Case2+0x394>)
 8001666:	2203      	movs	r2, #3
 8001668:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <followLine_Case2+0x388>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <followLine_Case2+0x38c>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <followLine_Case2+0x388>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <followLine_Case2+0x38c>)
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb33 	bl	8000cec <motor_ctr>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001b8 	.word	0x200001b8
 8001694:	20000198 	.word	0x20000198
 8001698:	2000019c 	.word	0x2000019c
 800169c:	200001bc 	.word	0x200001bc
 80016a0:	20000180 	.word	0x20000180

080016a4 <followLine_Case2Reset>:

void followLine_Case2Reset(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
//	Set_Servo_Angle(0);
  if (!case2_stopped) {
 80016aa:	4b9c      	ldr	r3, [pc, #624]	@ (800191c <followLine_Case2Reset+0x278>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80ea 	bne.w	8001888 <followLine_Case2Reset+0x1e4>
    Kp = 2.5;
 80016b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001920 <followLine_Case2Reset+0x27c>)
 80016b6:	4a9b      	ldr	r2, [pc, #620]	@ (8001924 <followLine_Case2Reset+0x280>)
 80016b8:	601a      	str	r2, [r3, #0]
    Ki = 0.0;
 80016ba:	4b9b      	ldr	r3, [pc, #620]	@ (8001928 <followLine_Case2Reset+0x284>)
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    Kd = 0.0;
 80016c2:	4b9a      	ldr	r3, [pc, #616]	@ (800192c <followLine_Case2Reset+0x288>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
    integral = 0;
 80016ca:	4b99      	ldr	r3, [pc, #612]	@ (8001930 <followLine_Case2Reset+0x28c>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    previous_error = 0;
 80016d2:	4b98      	ldr	r3, [pc, #608]	@ (8001934 <followLine_Case2Reset+0x290>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

    x = compute_position();
 80016da:	f7ff fb8f 	bl	8000dfc <compute_position>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a95      	ldr	r2, [pc, #596]	@ (8001938 <followLine_Case2Reset+0x294>)
 80016e2:	6013      	str	r3, [r2, #0]
    u = compute_pid(x);
 80016e4:	4b94      	ldr	r3, [pc, #592]	@ (8001938 <followLine_Case2Reset+0x294>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbc9 	bl	8000e80 <compute_pid>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a92      	ldr	r2, [pc, #584]	@ (800193c <followLine_Case2Reset+0x298>)
 80016f2:	6013      	str	r3, [r2, #0]
    if (fabs(x) < 1) {
 80016f4:	4b90      	ldr	r3, [pc, #576]	@ (8001938 <followLine_Case2Reset+0x294>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ffcf 	bl	80006a4 <__aeabi_fcmplt>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <followLine_Case2Reset+0x70>
      basespeed = 40;
 800170c:	4b8c      	ldr	r3, [pc, #560]	@ (8001940 <followLine_Case2Reset+0x29c>)
 800170e:	2228      	movs	r2, #40	@ 0x28
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e01e      	b.n	8001752 <followLine_Case2Reset+0xae>
    } else if (fabs(x) <= 2) {
 8001714:	4b88      	ldr	r3, [pc, #544]	@ (8001938 <followLine_Case2Reset+0x294>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800171c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ffc9 	bl	80006b8 <__aeabi_fcmple>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <followLine_Case2Reset+0x90>
      basespeed = 40;
 800172c:	4b84      	ldr	r3, [pc, #528]	@ (8001940 <followLine_Case2Reset+0x29c>)
 800172e:	2228      	movs	r2, #40	@ 0x28
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00e      	b.n	8001752 <followLine_Case2Reset+0xae>
    } else if (fabs(x) <= 4) {
 8001734:	4b80      	ldr	r3, [pc, #512]	@ (8001938 <followLine_Case2Reset+0x294>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800173c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ffb9 	bl	80006b8 <__aeabi_fcmple>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <followLine_Case2Reset+0xae>
      basespeed = 40;
 800174c:	4b7c      	ldr	r3, [pc, #496]	@ (8001940 <followLine_Case2Reset+0x29c>)
 800174e:	2228      	movs	r2, #40	@ 0x28
 8001750:	601a      	str	r2, [r3, #0]
    }

    int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 8001752:	4b7c      	ldr	r3, [pc, #496]	@ (8001944 <followLine_Case2Reset+0x2a0>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b7a      	ldr	r3, [pc, #488]	@ (8001944 <followLine_Case2Reset+0x2a0>)
 800175a:	785b      	ldrb	r3, [r3, #1]
 800175c:	4413      	add	r3, r2
 800175e:	4a79      	ldr	r2, [pc, #484]	@ (8001944 <followLine_Case2Reset+0x2a0>)
 8001760:	7892      	ldrb	r2, [r2, #2]
 8001762:	4413      	add	r3, r2
 8001764:	4a77      	ldr	r2, [pc, #476]	@ (8001944 <followLine_Case2Reset+0x2a0>)
 8001766:	78d2      	ldrb	r2, [r2, #3]
 8001768:	4413      	add	r3, r2
 800176a:	4a76      	ldr	r2, [pc, #472]	@ (8001944 <followLine_Case2Reset+0x2a0>)
 800176c:	7912      	ldrb	r2, [r2, #4]
 800176e:	4413      	add	r3, r2
 8001770:	607b      	str	r3, [r7, #4]

    if (case2_ignore_count < 50) {
 8001772:	4b75      	ldr	r3, [pc, #468]	@ (8001948 <followLine_Case2Reset+0x2a4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b31      	cmp	r3, #49	@ 0x31
 8001778:	dc33      	bgt.n	80017e2 <followLine_Case2Reset+0x13e>
      case2_ignore_count++;
 800177a:	4b73      	ldr	r3, [pc, #460]	@ (8001948 <followLine_Case2Reset+0x2a4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	4a71      	ldr	r2, [pc, #452]	@ (8001948 <followLine_Case2Reset+0x2a4>)
 8001782:	6013      	str	r3, [r2, #0]
      pwmL = basespeed + u;
 8001784:	4b6e      	ldr	r3, [pc, #440]	@ (8001940 <followLine_Case2Reset+0x29c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fd99 	bl	80002c0 <__aeabi_i2f>
 800178e:	4602      	mov	r2, r0
 8001790:	4b6a      	ldr	r3, [pc, #424]	@ (800193c <followLine_Case2Reset+0x298>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7fe fcde 	bl	8000158 <__addsf3>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe ffa8 	bl	80006f4 <__aeabi_f2iz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a69      	ldr	r2, [pc, #420]	@ (800194c <followLine_Case2Reset+0x2a8>)
 80017a8:	6013      	str	r3, [r2, #0]
      pwmR = basespeed - u;
 80017aa:	4b65      	ldr	r3, [pc, #404]	@ (8001940 <followLine_Case2Reset+0x29c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd86 	bl	80002c0 <__aeabi_i2f>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b61      	ldr	r3, [pc, #388]	@ (800193c <followLine_Case2Reset+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7fe fcc9 	bl	8000154 <__aeabi_fsub>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe ff95 	bl	80006f4 <__aeabi_f2iz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a60      	ldr	r2, [pc, #384]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 80017ce:	6013      	str	r3, [r2, #0]
      motor_ctr(pwmL, pwmR);
 80017d0:	4b5e      	ldr	r3, [pc, #376]	@ (800194c <followLine_Case2Reset+0x2a8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa86 	bl	8000cec <motor_ctr>
        pwmR = 0;
        motor_ctr(pwmL, pwmR);
      }
    }
  }
}
 80017e0:	e127      	b.n	8001a32 <followLine_Case2Reset+0x38e>
      if (sensor_sum == 5 && !case2_stopped) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d11b      	bne.n	8001820 <followLine_Case2Reset+0x17c>
 80017e8:	4b4c      	ldr	r3, [pc, #304]	@ (800191c <followLine_Case2Reset+0x278>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d117      	bne.n	8001820 <followLine_Case2Reset+0x17c>
        case2_stopped = 1;
 80017f0:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <followLine_Case2Reset+0x278>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 80017f6:	4b55      	ldr	r3, [pc, #340]	@ (800194c <followLine_Case2Reset+0x2a8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 80017fc:	4b54      	ldr	r3, [pc, #336]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 8001802:	4b52      	ldr	r3, [pc, #328]	@ (800194c <followLine_Case2Reset+0x2a8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a52      	ldr	r2, [pc, #328]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa6d 	bl	8000cec <motor_ctr>
        case2_post_stop_state = 1;
 8001812:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <followLine_Case2Reset+0x2b0>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 8001818:	4b4f      	ldr	r3, [pc, #316]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	e108      	b.n	8001a32 <followLine_Case2Reset+0x38e>
      } else if (!case2_stopped) {
 8001820:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <followLine_Case2Reset+0x278>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 8104 	bne.w	8001a32 <followLine_Case2Reset+0x38e>
        pwmL = basespeed + u;
 800182a:	4b45      	ldr	r3, [pc, #276]	@ (8001940 <followLine_Case2Reset+0x29c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fd46 	bl	80002c0 <__aeabi_i2f>
 8001834:	4602      	mov	r2, r0
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <followLine_Case2Reset+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7fe fc8b 	bl	8000158 <__addsf3>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe ff55 	bl	80006f4 <__aeabi_f2iz>
 800184a:	4603      	mov	r3, r0
 800184c:	4a3f      	ldr	r2, [pc, #252]	@ (800194c <followLine_Case2Reset+0x2a8>)
 800184e:	6013      	str	r3, [r2, #0]
        pwmR = basespeed - u;
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <followLine_Case2Reset+0x29c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fd33 	bl	80002c0 <__aeabi_i2f>
 800185a:	4602      	mov	r2, r0
 800185c:	4b37      	ldr	r3, [pc, #220]	@ (800193c <followLine_Case2Reset+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f7fe fc76 	bl	8000154 <__aeabi_fsub>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe ff42 	bl	80006f4 <__aeabi_f2iz>
 8001870:	4603      	mov	r3, r0
 8001872:	4a37      	ldr	r2, [pc, #220]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 8001874:	6013      	str	r3, [r2, #0]
        motor_ctr(pwmL, pwmR);
 8001876:	4b35      	ldr	r3, [pc, #212]	@ (800194c <followLine_Case2Reset+0x2a8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a35      	ldr	r2, [pc, #212]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa33 	bl	8000cec <motor_ctr>
}
 8001886:	e0d4      	b.n	8001a32 <followLine_Case2Reset+0x38e>
    if (case2_post_stop_state == 1) {
 8001888:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <followLine_Case2Reset+0x2b0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d12c      	bne.n	80018ea <followLine_Case2Reset+0x246>
      pwmL = 25;
 8001890:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <followLine_Case2Reset+0x2a8>)
 8001892:	2219      	movs	r2, #25
 8001894:	601a      	str	r2, [r3, #0]
      pwmR = 25;
 8001896:	4b2e      	ldr	r3, [pc, #184]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 8001898:	2219      	movs	r2, #25
 800189a:	601a      	str	r2, [r3, #0]
      motor_ctr(pwmL, pwmR);
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <followLine_Case2Reset+0x2a8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa20 	bl	8000cec <motor_ctr>
      case2_post_action_count++;
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a29      	ldr	r2, [pc, #164]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 80018b4:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 70) {
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b45      	cmp	r3, #69	@ 0x45
 80018bc:	f340 80b9 	ble.w	8001a32 <followLine_Case2Reset+0x38e>
        case2_post_stop_state = 2;
 80018c0:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <followLine_Case2Reset+0x2b0>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 80018c6:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <followLine_Case2Reset+0x2a8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <followLine_Case2Reset+0x2a8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <followLine_Case2Reset+0x2ac>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fa02 	bl	8000cec <motor_ctr>
}
 80018e8:	e0a3      	b.n	8001a32 <followLine_Case2Reset+0x38e>
    } else if (case2_post_stop_state == 2) {
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <followLine_Case2Reset+0x2b0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d134      	bne.n	800195c <followLine_Case2Reset+0x2b8>
      Set_Servo_Angle(40);
 80018f2:	2028      	movs	r0, #40	@ 0x28
 80018f4:	f7fe ff24 	bl	8000740 <Set_Servo_Angle>
      case2_post_action_count++;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4a16      	ldr	r2, [pc, #88]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 8001900:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 20) {
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b13      	cmp	r3, #19
 8001908:	f340 8093 	ble.w	8001a32 <followLine_Case2Reset+0x38e>
        case2_post_stop_state = 3;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <followLine_Case2Reset+0x2b0>)
 800190e:	2203      	movs	r2, #3
 8001910:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <followLine_Case2Reset+0x2b4>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
}
 8001918:	e08b      	b.n	8001a32 <followLine_Case2Reset+0x38e>
 800191a:	bf00      	nop
 800191c:	200001b0 	.word	0x200001b0
 8001920:	20000014 	.word	0x20000014
 8001924:	40200000 	.word	0x40200000
 8001928:	20000018 	.word	0x20000018
 800192c:	2000001c 	.word	0x2000001c
 8001930:	20000178 	.word	0x20000178
 8001934:	20000174 	.word	0x20000174
 8001938:	20000190 	.word	0x20000190
 800193c:	20000194 	.word	0x20000194
 8001940:	200001a0 	.word	0x200001a0
 8001944:	20000188 	.word	0x20000188
 8001948:	200001b4 	.word	0x200001b4
 800194c:	20000198 	.word	0x20000198
 8001950:	2000019c 	.word	0x2000019c
 8001954:	200001b8 	.word	0x200001b8
 8001958:	200001bc 	.word	0x200001bc
    } else if (case2_post_stop_state == 3) {
 800195c:	4b37      	ldr	r3, [pc, #220]	@ (8001a3c <followLine_Case2Reset+0x398>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d12d      	bne.n	80019c0 <followLine_Case2Reset+0x31c>
      pwmL = -30;
 8001964:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 8001966:	f06f 021d 	mvn.w	r2, #29
 800196a:	601a      	str	r2, [r3, #0]
      pwmR = -30;
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 800196e:	f06f 021d 	mvn.w	r2, #29
 8001972:	601a      	str	r2, [r3, #0]
      motor_ctr(pwmL, pwmR);
 8001974:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a32      	ldr	r2, [pc, #200]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f9b4 	bl	8000cec <motor_ctr>
      case2_post_action_count++;
 8001984:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 800198c:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 145) {
 800198e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b90      	cmp	r3, #144	@ 0x90
 8001994:	dd4d      	ble.n	8001a32 <followLine_Case2Reset+0x38e>
        case2_post_stop_state = 4;
 8001996:	4b29      	ldr	r3, [pc, #164]	@ (8001a3c <followLine_Case2Reset+0x398>)
 8001998:	2204      	movs	r2, #4
 800199a:	601a      	str	r2, [r3, #0]
        case2_post_action_count = 0;
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 80019a2:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 80019a8:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 80019ae:	4b24      	ldr	r3, [pc, #144]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a24      	ldr	r2, [pc, #144]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f997 	bl	8000cec <motor_ctr>
}
 80019be:	e038      	b.n	8001a32 <followLine_Case2Reset+0x38e>
    } else if (case2_post_stop_state == 4) {
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <followLine_Case2Reset+0x398>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d134      	bne.n	8001a32 <followLine_Case2Reset+0x38e>
      pwmL = 20;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 80019ca:	2214      	movs	r2, #20
 80019cc:	601a      	str	r2, [r3, #0]
      pwmR = -35;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 80019d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019d4:	601a      	str	r2, [r3, #0]
      motor_ctr(pwmL, pwmR);
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1a      	ldr	r2, [pc, #104]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f983 	bl	8000cec <motor_ctr>
      case2_post_action_count++;
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a16      	ldr	r2, [pc, #88]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 80019ee:	6013      	str	r3, [r2, #0]
      if (case2_post_action_count >= 110) {
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <followLine_Case2Reset+0x3a4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b6d      	cmp	r3, #109	@ 0x6d
 80019f6:	dd1c      	ble.n	8001a32 <followLine_Case2Reset+0x38e>
        case2_post_stop_state = 5;
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <followLine_Case2Reset+0x398>)
 80019fa:	2205      	movs	r2, #5
 80019fc:	601a      	str	r2, [r3, #0]
        current_case = 3;
 80019fe:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <followLine_Case2Reset+0x3a8>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	601a      	str	r2, [r3, #0]
        case2_reset_active = 0; // Clear the Case2Reset flag
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <followLine_Case2Reset+0x3ac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
        case3_has_grabbed = 0;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <followLine_Case2Reset+0x3b0>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
        case3_push_after_grab_count = 0;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <followLine_Case2Reset+0x3b4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
        pwmL = 0;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <followLine_Case2Reset+0x39c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <followLine_Case2Reset+0x3a0>)
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff f95d 	bl	8000cec <motor_ctr>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001b8 	.word	0x200001b8
 8001a40:	20000198 	.word	0x20000198
 8001a44:	2000019c 	.word	0x2000019c
 8001a48:	200001bc 	.word	0x200001bc
 8001a4c:	20000180 	.word	0x20000180
 8001a50:	200001ec 	.word	0x200001ec
 8001a54:	200001c0 	.word	0x200001c0
 8001a58:	200001e8 	.word	0x200001e8

08001a5c <followLine_Case3>:
void followLine_Case3(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
    if (!case3_stopped) {
 8001a62:	4b9a      	ldr	r3, [pc, #616]	@ (8001ccc <followLine_Case3+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 80ea 	bne.w	8001c40 <followLine_Case3+0x1e4>
        // Set PID values for normal line following
        Kp = 15;
 8001a6c:	4b98      	ldr	r3, [pc, #608]	@ (8001cd0 <followLine_Case3+0x274>)
 8001a6e:	4a99      	ldr	r2, [pc, #612]	@ (8001cd4 <followLine_Case3+0x278>)
 8001a70:	601a      	str	r2, [r3, #0]
        Ki = 0.0;
 8001a72:	4b99      	ldr	r3, [pc, #612]	@ (8001cd8 <followLine_Case3+0x27c>)
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
        Kd = 0.0;
 8001a7a:	4b98      	ldr	r3, [pc, #608]	@ (8001cdc <followLine_Case3+0x280>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
        integral = 0;
 8001a82:	4b97      	ldr	r3, [pc, #604]	@ (8001ce0 <followLine_Case3+0x284>)
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
        previous_error = 0;
 8001a8a:	4b96      	ldr	r3, [pc, #600]	@ (8001ce4 <followLine_Case3+0x288>)
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

        x = compute_position();
 8001a92:	f7ff f9b3 	bl	8000dfc <compute_position>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a93      	ldr	r2, [pc, #588]	@ (8001ce8 <followLine_Case3+0x28c>)
 8001a9a:	6013      	str	r3, [r2, #0]
        u = compute_pid(x);
 8001a9c:	4b92      	ldr	r3, [pc, #584]	@ (8001ce8 <followLine_Case3+0x28c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f9ed 	bl	8000e80 <compute_pid>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a90      	ldr	r2, [pc, #576]	@ (8001cec <followLine_Case3+0x290>)
 8001aaa:	6013      	str	r3, [r2, #0]
        if (fabs(x) < 1) {
 8001aac:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce8 <followLine_Case3+0x28c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ab4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fdf3 	bl	80006a4 <__aeabi_fcmplt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <followLine_Case3+0x70>
            basespeed = 35;
 8001ac4:	4b8a      	ldr	r3, [pc, #552]	@ (8001cf0 <followLine_Case3+0x294>)
 8001ac6:	2223      	movs	r2, #35	@ 0x23
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e01e      	b.n	8001b0a <followLine_Case3+0xae>
        } else if (fabs(x) <= 2) {
 8001acc:	4b86      	ldr	r3, [pc, #536]	@ (8001ce8 <followLine_Case3+0x28c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ad4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fded 	bl	80006b8 <__aeabi_fcmple>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <followLine_Case3+0x90>
            basespeed = 38;
 8001ae4:	4b82      	ldr	r3, [pc, #520]	@ (8001cf0 <followLine_Case3+0x294>)
 8001ae6:	2226      	movs	r2, #38	@ 0x26
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e00e      	b.n	8001b0a <followLine_Case3+0xae>
        } else if (fabs(x) <= 4) {
 8001aec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <followLine_Case3+0x28c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001af4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fddd 	bl	80006b8 <__aeabi_fcmple>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <followLine_Case3+0xae>
            basespeed = 35;
 8001b04:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf0 <followLine_Case3+0x294>)
 8001b06:	2223      	movs	r2, #35	@ 0x23
 8001b08:	601a      	str	r2, [r3, #0]
        }

        int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 8001b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf4 <followLine_Case3+0x298>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b78      	ldr	r3, [pc, #480]	@ (8001cf4 <followLine_Case3+0x298>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a77      	ldr	r2, [pc, #476]	@ (8001cf4 <followLine_Case3+0x298>)
 8001b18:	7892      	ldrb	r2, [r2, #2]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a75      	ldr	r2, [pc, #468]	@ (8001cf4 <followLine_Case3+0x298>)
 8001b1e:	78d2      	ldrb	r2, [r2, #3]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a74      	ldr	r2, [pc, #464]	@ (8001cf4 <followLine_Case3+0x298>)
 8001b24:	7912      	ldrb	r2, [r2, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	607b      	str	r3, [r7, #4]

        // Ignore initial sensor readings for 250ms (50 cycles * 5ms)
        if (case3_ignore_count < 50) {
 8001b2a:	4b73      	ldr	r3, [pc, #460]	@ (8001cf8 <followLine_Case3+0x29c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b31      	cmp	r3, #49	@ 0x31
 8001b30:	dc33      	bgt.n	8001b9a <followLine_Case3+0x13e>
            case3_ignore_count++;
 8001b32:	4b71      	ldr	r3, [pc, #452]	@ (8001cf8 <followLine_Case3+0x29c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a6f      	ldr	r2, [pc, #444]	@ (8001cf8 <followLine_Case3+0x29c>)
 8001b3a:	6013      	str	r3, [r2, #0]
            pwmL = basespeed + u;
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf0 <followLine_Case3+0x294>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fbbd 	bl	80002c0 <__aeabi_i2f>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b68      	ldr	r3, [pc, #416]	@ (8001cec <followLine_Case3+0x290>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f7fe fb02 	bl	8000158 <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fdcc 	bl	80006f4 <__aeabi_f2iz>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a67      	ldr	r2, [pc, #412]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001b60:	6013      	str	r3, [r2, #0]
            pwmR = basespeed - u;
 8001b62:	4b63      	ldr	r3, [pc, #396]	@ (8001cf0 <followLine_Case3+0x294>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fbaa 	bl	80002c0 <__aeabi_i2f>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <followLine_Case3+0x290>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4610      	mov	r0, r2
 8001b76:	f7fe faed 	bl	8000154 <__aeabi_fsub>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fdb9 	bl	80006f4 <__aeabi_f2iz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a5e      	ldr	r2, [pc, #376]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001b86:	6013      	str	r3, [r2, #0]
            motor_ctr(pwmL, pwmR);
 8001b88:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5c      	ldr	r2, [pc, #368]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f8aa 	bl	8000cec <motor_ctr>
                pwmR = 0;
                motor_ctr(pwmL, pwmR);
            }
        }
    }
}
 8001b98:	e0f0      	b.n	8001d7c <followLine_Case3+0x320>
            if (sensor_sum == 4 && !case3_stopped) {
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d11b      	bne.n	8001bd8 <followLine_Case3+0x17c>
 8001ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <followLine_Case3+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d117      	bne.n	8001bd8 <followLine_Case3+0x17c>
                case3_stopped = 1;
 8001ba8:	4b48      	ldr	r3, [pc, #288]	@ (8001ccc <followLine_Case3+0x270>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
                pwmL = 0;
 8001bae:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
                pwmR = 0;
 8001bb4:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
                motor_ctr(pwmL, pwmR);
 8001bba:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a50      	ldr	r2, [pc, #320]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f891 	bl	8000cec <motor_ctr>
                case3_post_stop_state = 1;
 8001bca:	4b4e      	ldr	r3, [pc, #312]	@ (8001d04 <followLine_Case3+0x2a8>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
                case3_post_action_count = 0;
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	e0d1      	b.n	8001d7c <followLine_Case3+0x320>
            } else if (!case3_stopped) {
 8001bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ccc <followLine_Case3+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 80cd 	bne.w	8001d7c <followLine_Case3+0x320>
                pwmL = basespeed + u;
 8001be2:	4b43      	ldr	r3, [pc, #268]	@ (8001cf0 <followLine_Case3+0x294>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fb6a 	bl	80002c0 <__aeabi_i2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <followLine_Case3+0x290>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f7fe faaf 	bl	8000158 <__addsf3>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fd79 	bl	80006f4 <__aeabi_f2iz>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a3d      	ldr	r2, [pc, #244]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001c06:	6013      	str	r3, [r2, #0]
                pwmR = basespeed - u;
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <followLine_Case3+0x294>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fb57 	bl	80002c0 <__aeabi_i2f>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <followLine_Case3+0x290>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f7fe fa9a 	bl	8000154 <__aeabi_fsub>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fd66 	bl	80006f4 <__aeabi_f2iz>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a35      	ldr	r2, [pc, #212]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001c2c:	6013      	str	r3, [r2, #0]
                motor_ctr(pwmL, pwmR);
 8001c2e:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a33      	ldr	r2, [pc, #204]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f857 	bl	8000cec <motor_ctr>
}
 8001c3e:	e09d      	b.n	8001d7c <followLine_Case3+0x320>
        if (case3_post_stop_state == 1) {
 8001c40:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <followLine_Case3+0x2a8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d11e      	bne.n	8001c86 <followLine_Case3+0x22a>
            pwmL = 0;
 8001c48:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
            pwmR = 0;
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
            motor_ctr(pwmL, pwmR);
 8001c54:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f844 	bl	8000cec <motor_ctr>
            case3_post_action_count++;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001c6c:	6013      	str	r3, [r2, #0]
            if (case3_post_action_count >= 20) {
 8001c6e:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b13      	cmp	r3, #19
 8001c74:	f340 8082 	ble.w	8001d7c <followLine_Case3+0x320>
                case3_post_stop_state = 2;
 8001c78:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <followLine_Case3+0x2a8>)
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
                case3_post_action_count = 0;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
}
 8001c84:	e07a      	b.n	8001d7c <followLine_Case3+0x320>
        } else if (case3_post_stop_state == 2) {
 8001c86:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <followLine_Case3+0x2a8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d13e      	bne.n	8001d0c <followLine_Case3+0x2b0>
            pwmL = -35; // Left motor backward
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001c90:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c94:	601a      	str	r2, [r3, #0]
            pwmR = 20;  // Right motor forward
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001c98:	2214      	movs	r2, #20
 8001c9a:	601a      	str	r2, [r3, #0]
            motor_ctr(pwmL, pwmR);
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <followLine_Case3+0x2a0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <followLine_Case3+0x2a4>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f820 	bl	8000cec <motor_ctr>
            case3_post_action_count++;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a15      	ldr	r2, [pc, #84]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001cb4:	6013      	str	r3, [r2, #0]
            if (case3_post_action_count >= 100) {
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b63      	cmp	r3, #99	@ 0x63
 8001cbc:	dd5e      	ble.n	8001d7c <followLine_Case3+0x320>
                case3_post_stop_state = 3;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <followLine_Case3+0x2a8>)
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	601a      	str	r2, [r3, #0]
                case3_post_action_count = 0;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <followLine_Case3+0x2ac>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	e057      	b.n	8001d7c <followLine_Case3+0x320>
 8001ccc:	200001c4 	.word	0x200001c4
 8001cd0:	20000014 	.word	0x20000014
 8001cd4:	41700000 	.word	0x41700000
 8001cd8:	20000018 	.word	0x20000018
 8001cdc:	2000001c 	.word	0x2000001c
 8001ce0:	20000178 	.word	0x20000178
 8001ce4:	20000174 	.word	0x20000174
 8001ce8:	20000190 	.word	0x20000190
 8001cec:	20000194 	.word	0x20000194
 8001cf0:	200001a0 	.word	0x200001a0
 8001cf4:	20000188 	.word	0x20000188
 8001cf8:	200001c8 	.word	0x200001c8
 8001cfc:	20000198 	.word	0x20000198
 8001d00:	2000019c 	.word	0x2000019c
 8001d04:	200001cc 	.word	0x200001cc
 8001d08:	200001d0 	.word	0x200001d0
        } else if (case3_post_stop_state == 3) {
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <followLine_Case3+0x328>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d133      	bne.n	8001d7c <followLine_Case3+0x320>
            pwmL = 0;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <followLine_Case3+0x32c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
            pwmR = 0;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <followLine_Case3+0x330>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
            motor_ctr(pwmL, pwmR);
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <followLine_Case3+0x32c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <followLine_Case3+0x330>)
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffde 	bl	8000cec <motor_ctr>
            case3_post_action_count++;
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <followLine_Case3+0x334>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <followLine_Case3+0x334>)
 8001d38:	6013      	str	r3, [r2, #0]
            if (case3_post_action_count >= 10) { // Brief final stop
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <followLine_Case3+0x334>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	dd1c      	ble.n	8001d7c <followLine_Case3+0x320>
                current_case = 4;
 8001d42:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <followLine_Case3+0x338>)
 8001d44:	2204      	movs	r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
                case3_stopped = 0;
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <followLine_Case3+0x33c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
                case3_ignore_count = 0;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <followLine_Case3+0x340>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
                case3_post_stop_state = 0;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <followLine_Case3+0x328>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
                case3_post_action_count = 0;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <followLine_Case3+0x334>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
                pwmL = 0;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <followLine_Case3+0x32c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
                pwmR = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <followLine_Case3+0x330>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
                motor_ctr(pwmL, pwmR);
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <followLine_Case3+0x32c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a06      	ldr	r2, [pc, #24]	@ (8001d8c <followLine_Case3+0x330>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ffb8 	bl	8000cec <motor_ctr>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200001cc 	.word	0x200001cc
 8001d88:	20000198 	.word	0x20000198
 8001d8c:	2000019c 	.word	0x2000019c
 8001d90:	200001d0 	.word	0x200001d0
 8001d94:	20000180 	.word	0x20000180
 8001d98:	200001c4 	.word	0x200001c4
 8001d9c:	200001c8 	.word	0x200001c8

08001da0 <followLine_Case4>:
void followLine_Case4(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    // Set new PID values for Case4
    Kp = 10;
 8001da6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f50 <followLine_Case4+0x1b0>)
 8001da8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f54 <followLine_Case4+0x1b4>)
 8001daa:	601a      	str	r2, [r3, #0]
    Ki = 0.0;
 8001dac:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <followLine_Case4+0x1b8>)
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    Kd = 0.0;
 8001db4:	4b69      	ldr	r3, [pc, #420]	@ (8001f5c <followLine_Case4+0x1bc>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
    integral = 0;
 8001dbc:	4b68      	ldr	r3, [pc, #416]	@ (8001f60 <followLine_Case4+0x1c0>)
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    previous_error = 0;
 8001dc4:	4b67      	ldr	r3, [pc, #412]	@ (8001f64 <followLine_Case4+0x1c4>)
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

    x = compute_position();
 8001dcc:	f7ff f816 	bl	8000dfc <compute_position>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4a65      	ldr	r2, [pc, #404]	@ (8001f68 <followLine_Case4+0x1c8>)
 8001dd4:	6013      	str	r3, [r2, #0]
    u = compute_pid(x);
 8001dd6:	4b64      	ldr	r3, [pc, #400]	@ (8001f68 <followLine_Case4+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f850 	bl	8000e80 <compute_pid>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a62      	ldr	r2, [pc, #392]	@ (8001f6c <followLine_Case4+0x1cc>)
 8001de4:	6013      	str	r3, [r2, #0]
    if (fabs(x) < 1) {
 8001de6:	4b60      	ldr	r3, [pc, #384]	@ (8001f68 <followLine_Case4+0x1c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fc56 	bl	80006a4 <__aeabi_fcmplt>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <followLine_Case4+0x66>
        basespeed = 35; // Slower base speed
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001f70 <followLine_Case4+0x1d0>)
 8001e00:	2223      	movs	r2, #35	@ 0x23
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e01e      	b.n	8001e44 <followLine_Case4+0xa4>
    } else if (fabs(x) <= 2) {
 8001e06:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <followLine_Case4+0x1c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e0e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fc50 	bl	80006b8 <__aeabi_fcmple>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <followLine_Case4+0x86>
        basespeed = 35;
 8001e1e:	4b54      	ldr	r3, [pc, #336]	@ (8001f70 <followLine_Case4+0x1d0>)
 8001e20:	2223      	movs	r2, #35	@ 0x23
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e00e      	b.n	8001e44 <followLine_Case4+0xa4>
    } else if (fabs(x) <= 4) {
 8001e26:	4b50      	ldr	r3, [pc, #320]	@ (8001f68 <followLine_Case4+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e2e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fc40 	bl	80006b8 <__aeabi_fcmple>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <followLine_Case4+0xa4>
        basespeed = 35;
 8001e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f70 <followLine_Case4+0x1d0>)
 8001e40:	2223      	movs	r2, #35	@ 0x23
 8001e42:	601a      	str	r2, [r3, #0]
    }

    static int grab_state = 0;
    static int forward_count = 0;

    if (grab_state == 0) {
 8001e44:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <followLine_Case4+0x1d4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d149      	bne.n	8001ee0 <followLine_Case4+0x140>
        int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <followLine_Case4+0x1d8>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b49      	ldr	r3, [pc, #292]	@ (8001f78 <followLine_Case4+0x1d8>)
 8001e54:	785b      	ldrb	r3, [r3, #1]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a47      	ldr	r2, [pc, #284]	@ (8001f78 <followLine_Case4+0x1d8>)
 8001e5a:	7892      	ldrb	r2, [r2, #2]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a46      	ldr	r2, [pc, #280]	@ (8001f78 <followLine_Case4+0x1d8>)
 8001e60:	78d2      	ldrb	r2, [r2, #3]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a44      	ldr	r2, [pc, #272]	@ (8001f78 <followLine_Case4+0x1d8>)
 8001e66:	7912      	ldrb	r2, [r2, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	607b      	str	r3, [r7, #4]
        if (sensor_sum == 5) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d10f      	bne.n	8001e92 <followLine_Case4+0xf2>
            Set_Servo_Angle(0); // Grab
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7fe fc64 	bl	8000740 <Set_Servo_Angle>
            grab_state = 1;
 8001e78:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <followLine_Case4+0x1d4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
            forward_count = 0;
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f7c <followLine_Case4+0x1dc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
            pwmL = 20; // Start slow forward
 8001e84:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001e86:	2214      	movs	r2, #20
 8001e88:	601a      	str	r2, [r3, #0]
            pwmR = 20;
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001e8c:	2214      	movs	r2, #20
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e052      	b.n	8001f38 <followLine_Case4+0x198>
        } else {
            pwmL = basespeed + u;
 8001e92:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <followLine_Case4+0x1d0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fa12 	bl	80002c0 <__aeabi_i2f>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <followLine_Case4+0x1cc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	f7fe f957 	bl	8000158 <__addsf3>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fc21 	bl	80006f4 <__aeabi_f2iz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a32      	ldr	r2, [pc, #200]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001eb6:	6013      	str	r3, [r2, #0]
            pwmR = basespeed - u;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <followLine_Case4+0x1d0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe f9ff 	bl	80002c0 <__aeabi_i2f>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <followLine_Case4+0x1cc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f7fe f942 	bl	8000154 <__aeabi_fsub>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fc0e 	bl	80006f4 <__aeabi_f2iz>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a2a      	ldr	r2, [pc, #168]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e02b      	b.n	8001f38 <followLine_Case4+0x198>
        }
    } else if (grab_state == 1) {
 8001ee0:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <followLine_Case4+0x1d4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d121      	bne.n	8001f2c <followLine_Case4+0x18c>
        pwmL = 30; // Slow forward
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001eea:	221e      	movs	r2, #30
 8001eec:	601a      	str	r2, [r3, #0]
        pwmR = 30;
 8001eee:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001ef0:	221e      	movs	r2, #30
 8001ef2:	601a      	str	r2, [r3, #0]
        motor_ctr(pwmL, pwmR);
 8001ef4:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a22      	ldr	r2, [pc, #136]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fef4 	bl	8000cec <motor_ctr>
        forward_count++;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <followLine_Case4+0x1dc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <followLine_Case4+0x1dc>)
 8001f0c:	6013      	str	r3, [r2, #0]
        if (forward_count >= 500) { // 2 seconds (400 cycles * 5ms)
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <followLine_Case4+0x1dc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f16:	db0f      	blt.n	8001f38 <followLine_Case4+0x198>
            grab_state = 2;
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <followLine_Case4+0x1d4>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
            pwmL = 0;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
            pwmR = 0;
 8001f24:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e005      	b.n	8001f38 <followLine_Case4+0x198>
        }
    } else {
        pwmL = 0;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
        pwmR = 0;
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    }

    motor_ctr(pwmL, pwmR);
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <followLine_Case4+0x1e0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <followLine_Case4+0x1e4>)
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fed2 	bl	8000cec <motor_ctr>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000014 	.word	0x20000014
 8001f54:	41200000 	.word	0x41200000
 8001f58:	20000018 	.word	0x20000018
 8001f5c:	2000001c 	.word	0x2000001c
 8001f60:	20000178 	.word	0x20000178
 8001f64:	20000174 	.word	0x20000174
 8001f68:	20000190 	.word	0x20000190
 8001f6c:	20000194 	.word	0x20000194
 8001f70:	200001a0 	.word	0x200001a0
 8001f74:	200001f0 	.word	0x200001f0
 8001f78:	20000188 	.word	0x20000188
 8001f7c:	200001f4 	.word	0x200001f4
 8001f80:	20000198 	.word	0x20000198
 8001f84:	2000019c 	.word	0x2000019c

08001f88 <followLine_CaseF>:

/* Complete the followLine_CaseF function */
void followLine_CaseF(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
    // Set PID values for CaseF
    Kp = 18;
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <followLine_CaseF+0x134>)
 8001f90:	4a4b      	ldr	r2, [pc, #300]	@ (80020c0 <followLine_CaseF+0x138>)
 8001f92:	601a      	str	r2, [r3, #0]
    Ki = 0.0;
 8001f94:	4b4b      	ldr	r3, [pc, #300]	@ (80020c4 <followLine_CaseF+0x13c>)
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
    Kd = 0.0;
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <followLine_CaseF+0x140>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    integral = 0;
 8001fa4:	4b49      	ldr	r3, [pc, #292]	@ (80020cc <followLine_CaseF+0x144>)
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
    previous_error = 0;
 8001fac:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <followLine_CaseF+0x148>)
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

    // Read sensors and compute position
    x = compute_position();
 8001fb4:	f7fe ff22 	bl	8000dfc <compute_position>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4a46      	ldr	r2, [pc, #280]	@ (80020d4 <followLine_CaseF+0x14c>)
 8001fbc:	6013      	str	r3, [r2, #0]
    u = compute_pid(x);
 8001fbe:	4b45      	ldr	r3, [pc, #276]	@ (80020d4 <followLine_CaseF+0x14c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe ff5c 	bl	8000e80 <compute_pid>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a43      	ldr	r2, [pc, #268]	@ (80020d8 <followLine_CaseF+0x150>)
 8001fcc:	6013      	str	r3, [r2, #0]

    // Set speed based on position error
    if (fabs(x) < 1) {
 8001fce:	4b41      	ldr	r3, [pc, #260]	@ (80020d4 <followLine_CaseF+0x14c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fd6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fb62 	bl	80006a4 <__aeabi_fcmplt>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <followLine_CaseF+0x66>
        basespeed = 40;
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <followLine_CaseF+0x154>)
 8001fe8:	2228      	movs	r2, #40	@ 0x28
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e01e      	b.n	800202c <followLine_CaseF+0xa4>
    } else if (fabs(x) <= 2) {
 8001fee:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <followLine_CaseF+0x14c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ff6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fb5c 	bl	80006b8 <__aeabi_fcmple>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <followLine_CaseF+0x86>
        basespeed = 38;
 8002006:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <followLine_CaseF+0x154>)
 8002008:	2226      	movs	r2, #38	@ 0x26
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e00e      	b.n	800202c <followLine_CaseF+0xa4>
    } else if (fabs(x) <= 4) {
 800200e:	4b31      	ldr	r3, [pc, #196]	@ (80020d4 <followLine_CaseF+0x14c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002016:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fb4c 	bl	80006b8 <__aeabi_fcmple>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <followLine_CaseF+0xa4>
        basespeed = 40;
 8002026:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <followLine_CaseF+0x154>)
 8002028:	2228      	movs	r2, #40	@ 0x28
 800202a:	601a      	str	r2, [r3, #0]
    }

    // Calculate motor speeds
    pwmL = basespeed + u;
 800202c:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <followLine_CaseF+0x154>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f945 	bl	80002c0 <__aeabi_i2f>
 8002036:	4602      	mov	r2, r0
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <followLine_CaseF+0x150>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f7fe f88a 	bl	8000158 <__addsf3>
 8002044:	4603      	mov	r3, r0
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fb54 	bl	80006f4 <__aeabi_f2iz>
 800204c:	4603      	mov	r3, r0
 800204e:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <followLine_CaseF+0x158>)
 8002050:	6013      	str	r3, [r2, #0]
    pwmR = basespeed - u;
 8002052:	4b22      	ldr	r3, [pc, #136]	@ (80020dc <followLine_CaseF+0x154>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe f932 	bl	80002c0 <__aeabi_i2f>
 800205c:	4602      	mov	r2, r0
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <followLine_CaseF+0x150>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7fe f875 	bl	8000154 <__aeabi_fsub>
 800206a:	4603      	mov	r3, r0
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fb41 	bl	80006f4 <__aeabi_f2iz>
 8002072:	4603      	mov	r3, r0
 8002074:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <followLine_CaseF+0x15c>)
 8002076:	6013      	str	r3, [r2, #0]
    motor_ctr(pwmL, pwmR);
 8002078:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <followLine_CaseF+0x158>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	@ (80020e4 <followLine_CaseF+0x15c>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe32 	bl	8000cec <motor_ctr>

    // Example end condition: when all sensors detect line (you can modify this)
    int sensor_sum = sensor_values[0] + sensor_values[1] + sensor_values[2] + sensor_values[3] + sensor_values[4];
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <followLine_CaseF+0x160>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <followLine_CaseF+0x160>)
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	4413      	add	r3, r2
 8002094:	4a14      	ldr	r2, [pc, #80]	@ (80020e8 <followLine_CaseF+0x160>)
 8002096:	7892      	ldrb	r2, [r2, #2]
 8002098:	4413      	add	r3, r2
 800209a:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <followLine_CaseF+0x160>)
 800209c:	78d2      	ldrb	r2, [r2, #3]
 800209e:	4413      	add	r3, r2
 80020a0:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <followLine_CaseF+0x160>)
 80020a2:	7912      	ldrb	r2, [r2, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	607b      	str	r3, [r7, #4]
    if (sensor_sum == 5) {
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d102      	bne.n	80020b4 <followLine_CaseF+0x12c>
        caseF_end_condition = 1;  // Set flag to end CaseF
 80020ae:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <followLine_CaseF+0x164>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    // Or add other end conditions as needed
    // For example, if no line is detected for a certain time:
    // if (sensor_sum == 0) {
    //     caseF_end_condition = 1;
    // }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000014 	.word	0x20000014
 80020c0:	41900000 	.word	0x41900000
 80020c4:	20000018 	.word	0x20000018
 80020c8:	2000001c 	.word	0x2000001c
 80020cc:	20000178 	.word	0x20000178
 80020d0:	20000174 	.word	0x20000174
 80020d4:	20000190 	.word	0x20000190
 80020d8:	20000194 	.word	0x20000194
 80020dc:	200001a0 	.word	0x200001a0
 80020e0:	20000198 	.word	0x20000198
 80020e4:	2000019c 	.word	0x2000019c
 80020e8:	20000188 	.word	0x20000188
 80020ec:	200001d8 	.word	0x200001d8

080020f0 <execute_command>:

// Modified execute_command function - FIXED VERSION
void execute_command(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  if (last_command != 0) {
 80020f4:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <execute_command+0x168>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 80a5 	beq.w	8002248 <execute_command+0x158>
    // Calculate basespeed properly - ensure it's always reasonable
    basespeed = (98 * speed_level) / 9;
 80020fe:	4b57      	ldr	r3, [pc, #348]	@ (800225c <execute_command+0x16c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2262      	movs	r2, #98	@ 0x62
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	4a55      	ldr	r2, [pc, #340]	@ (8002260 <execute_command+0x170>)
 800210a:	fb82 1203 	smull	r1, r2, r2, r3
 800210e:	1052      	asrs	r2, r2, #1
 8002110:	17db      	asrs	r3, r3, #31
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a53      	ldr	r2, [pc, #332]	@ (8002264 <execute_command+0x174>)
 8002116:	6013      	str	r3, [r2, #0]
    if (basespeed < 50) basespeed = 50; // Lower minimum for better control
 8002118:	4b52      	ldr	r3, [pc, #328]	@ (8002264 <execute_command+0x174>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b31      	cmp	r3, #49	@ 0x31
 800211e:	dc02      	bgt.n	8002126 <execute_command+0x36>
 8002120:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <execute_command+0x174>)
 8002122:	2232      	movs	r2, #50	@ 0x32
 8002124:	601a      	str	r2, [r3, #0]

    switch (last_command) {
 8002126:	4b4c      	ldr	r3, [pc, #304]	@ (8002258 <execute_command+0x168>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3b42      	subs	r3, #66	@ 0x42
 800212c:	2b11      	cmp	r3, #17
 800212e:	f200 8090 	bhi.w	8002252 <execute_command+0x162>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <execute_command+0x48>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002193 	.word	0x08002193
 800213c:	08002253 	.word	0x08002253
 8002140:	08002253 	.word	0x08002253
 8002144:	08002253 	.word	0x08002253
 8002148:	08002181 	.word	0x08002181
 800214c:	080021d1 	.word	0x080021d1
 8002150:	08002201 	.word	0x08002201
 8002154:	080021eb 	.word	0x080021eb
 8002158:	0800221f 	.word	0x0800221f
 800215c:	08002253 	.word	0x08002253
 8002160:	080021a9 	.word	0x080021a9
 8002164:	08002253 	.word	0x08002253
 8002168:	08002253 	.word	0x08002253
 800216c:	08002253 	.word	0x08002253
 8002170:	08002253 	.word	0x08002253
 8002174:	08002253 	.word	0x08002253
 8002178:	080021bd 	.word	0x080021bd
 800217c:	08002239 	.word	0x08002239
      case 'F': motor_ctr(basespeed, basespeed); break;
 8002180:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <execute_command+0x174>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a37      	ldr	r2, [pc, #220]	@ (8002264 <execute_command+0x174>)
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fdae 	bl	8000cec <motor_ctr>
 8002190:	e060      	b.n	8002254 <execute_command+0x164>
      case 'B': motor_ctr(-basespeed, -basespeed); break;
 8002192:	4b34      	ldr	r3, [pc, #208]	@ (8002264 <execute_command+0x174>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	425a      	negs	r2, r3
 8002198:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <execute_command+0x174>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	425b      	negs	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7fe fda3 	bl	8000cec <motor_ctr>
 80021a6:	e055      	b.n	8002254 <execute_command+0x164>
      case 'L': motor_ctr(-basespeed, basespeed); break;
 80021a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002264 <execute_command+0x174>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	425b      	negs	r3, r3
 80021ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <execute_command+0x174>)
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fd99 	bl	8000cec <motor_ctr>
 80021ba:	e04b      	b.n	8002254 <execute_command+0x164>
      case 'R': motor_ctr(basespeed, -basespeed); break;
 80021bc:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <execute_command+0x174>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <execute_command+0x174>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	425b      	negs	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7fe fd8f 	bl	8000cec <motor_ctr>
 80021ce:	e041      	b.n	8002254 <execute_command+0x164>
      case 'G': motor_ctr(basespeed / 2, basespeed); break;
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <execute_command+0x174>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0fda      	lsrs	r2, r3, #31
 80021d6:	4413      	add	r3, r2
 80021d8:	105b      	asrs	r3, r3, #1
 80021da:	461a      	mov	r2, r3
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <execute_command+0x174>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f7fe fd82 	bl	8000cec <motor_ctr>
 80021e8:	e034      	b.n	8002254 <execute_command+0x164>
      case 'I': motor_ctr(basespeed, basespeed / 2); break;
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <execute_command+0x174>)
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <execute_command+0x174>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0fda      	lsrs	r2, r3, #31
 80021f4:	4413      	add	r3, r2
 80021f6:	105b      	asrs	r3, r3, #1
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fd77 	bl	8000cec <motor_ctr>
 80021fe:	e029      	b.n	8002254 <execute_command+0x164>
      case 'H': motor_ctr(-basespeed / 2, -basespeed); break;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <execute_command+0x174>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0fda      	lsrs	r2, r3, #31
 8002206:	4413      	add	r3, r2
 8002208:	105b      	asrs	r3, r3, #1
 800220a:	425b      	negs	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <execute_command+0x174>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	425b      	negs	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7fe fd68 	bl	8000cec <motor_ctr>
 800221c:	e01a      	b.n	8002254 <execute_command+0x164>
      case 'J': motor_ctr(-basespeed, -basespeed / 2); break;
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <execute_command+0x174>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4258      	negs	r0, r3
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <execute_command+0x174>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0fda      	lsrs	r2, r3, #31
 800222a:	4413      	add	r3, r2
 800222c:	105b      	asrs	r3, r3, #1
 800222e:	425b      	negs	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fd5b 	bl	8000cec <motor_ctr>
 8002236:	e00d      	b.n	8002254 <execute_command+0x164>
      case 'S':
        motor_ctr(0, 0);
 8002238:	2100      	movs	r1, #0
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fd56 	bl	8000cec <motor_ctr>
        last_command = 0; // Clear command after stop
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <execute_command+0x168>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
        break;
 8002246:	e005      	b.n	8002254 <execute_command+0x164>
        // Don't clear last_command for unknown commands - keep moving
        break;
    }
    // Don't automatically clear last_command - let it persist for continuous movement
  } else {
    motor_ctr(0, 0);  // Stop if no command
 8002248:	2100      	movs	r1, #0
 800224a:	2000      	movs	r0, #0
 800224c:	f7fe fd4e 	bl	8000cec <motor_ctr>
  }
}
 8002250:	e000      	b.n	8002254 <execute_command+0x164>
        break;
 8002252:	bf00      	nop
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200001a9 	.word	0x200001a9
 800225c:	20000028 	.word	0x20000028
 8002260:	38e38e39 	.word	0x38e38e39
 8002264:	200001a0 	.word	0x200001a0

08002268 <HAL_UART_RxCpltCallback>:

/* Modified UART callback - add this to your existing HAL_UART_RxCpltCallback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a95      	ldr	r2, [pc, #596]	@ (80024cc <HAL_UART_RxCpltCallback+0x264>)
 8002276:	4293      	cmp	r3, r2
 8002278:	f040 818c 	bne.w	8002594 <HAL_UART_RxCpltCallback+0x32c>
        HAL_UART_Receive_IT(&huart1, &rx_data, 1); // Re-arm UART interrupt
 800227c:	2201      	movs	r2, #1
 800227e:	4994      	ldr	r1, [pc, #592]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002280:	4894      	ldr	r0, [pc, #592]	@ (80024d4 <HAL_UART_RxCpltCallback+0x26c>)
 8002282:	f002 fb61 	bl	8004948 <HAL_UART_Receive_IT>

        if (rx_data == 'W') {
 8002286:	4b92      	ldr	r3, [pc, #584]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b57      	cmp	r3, #87	@ 0x57
 800228c:	d106      	bne.n	800229c <HAL_UART_RxCpltCallback+0x34>
            grip = 'W';          // Close gripper
 800228e:	4b92      	ldr	r3, [pc, #584]	@ (80024d8 <HAL_UART_RxCpltCallback+0x270>)
 8002290:	2257      	movs	r2, #87	@ 0x57
 8002292:	701a      	strb	r2, [r3, #0]
            last_command = 0;
 8002294:	4b91      	ldr	r3, [pc, #580]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
        else if (rx_data == 'q') {
            speed_level--;
            if (speed_level < 0) speed_level = 0;
        }
    }
}
 800229a:	e17b      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'w') {
 800229c:	4b8c      	ldr	r3, [pc, #560]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b77      	cmp	r3, #119	@ 0x77
 80022a2:	d106      	bne.n	80022b2 <HAL_UART_RxCpltCallback+0x4a>
            grip = 'w';          // Open gripper
 80022a4:	4b8c      	ldr	r3, [pc, #560]	@ (80024d8 <HAL_UART_RxCpltCallback+0x270>)
 80022a6:	2277      	movs	r2, #119	@ 0x77
 80022a8:	701a      	strb	r2, [r3, #0]
            last_command = 0;
 80022aa:	4b8c      	ldr	r3, [pc, #560]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
}
 80022b0:	e170      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'X') {
 80022b2:	4b87      	ldr	r3, [pc, #540]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b58      	cmp	r3, #88	@ 0x58
 80022b8:	d123      	bne.n	8002302 <HAL_UART_RxCpltCallback+0x9a>
            case2_reset_active = 1;
 80022ba:	4b89      	ldr	r3, [pc, #548]	@ (80024e0 <HAL_UART_RxCpltCallback+0x278>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]
            current_case = 2; // Set to case 2 but will use Case2Reset
 80022c0:	4b88      	ldr	r3, [pc, #544]	@ (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
            uto = 'u'; // Set to auto mode
 80022c6:	4b88      	ldr	r3, [pc, #544]	@ (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 80022c8:	2275      	movs	r2, #117	@ 0x75
 80022ca:	701a      	strb	r2, [r3, #0]
            last_command = 0;
 80022cc:	4b83      	ldr	r3, [pc, #524]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
            case2_stopped = 0;
 80022d2:	4b86      	ldr	r3, [pc, #536]	@ (80024ec <HAL_UART_RxCpltCallback+0x284>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
            case2_ignore_count = 0;
 80022d8:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <HAL_UART_RxCpltCallback+0x288>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
            case2_post_stop_state = 0;
 80022de:	4b85      	ldr	r3, [pc, #532]	@ (80024f4 <HAL_UART_RxCpltCallback+0x28c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
            case2_post_action_count = 0;
 80022e4:	4b84      	ldr	r3, [pc, #528]	@ (80024f8 <HAL_UART_RxCpltCallback+0x290>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
            integral = 0;
 80022ea:	4b84      	ldr	r3, [pc, #528]	@ (80024fc <HAL_UART_RxCpltCallback+0x294>)
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
            previous_error = 0;
 80022f2:	4b83      	ldr	r3, [pc, #524]	@ (8002500 <HAL_UART_RxCpltCallback+0x298>)
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
            j = 0;
 80022fa:	4b82      	ldr	r3, [pc, #520]	@ (8002504 <HAL_UART_RxCpltCallback+0x29c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	e148      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'V') {
 8002302:	4b73      	ldr	r3, [pc, #460]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b56      	cmp	r3, #86	@ 0x56
 8002308:	d123      	bne.n	8002352 <HAL_UART_RxCpltCallback+0xea>
            caseF_active = 1;
 800230a:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_UART_RxCpltCallback+0x2a0>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]
            caseF_end_condition = 0;
 8002310:	4b7e      	ldr	r3, [pc, #504]	@ (800250c <HAL_UART_RxCpltCallback+0x2a4>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
            uto = 'F';
 8002316:	4b74      	ldr	r3, [pc, #464]	@ (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 8002318:	2246      	movs	r2, #70	@ 0x46
 800231a:	701a      	strb	r2, [r3, #0]
            last_command = 0;
 800231c:	4b6f      	ldr	r3, [pc, #444]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
            integral = 0;
 8002322:	4b76      	ldr	r3, [pc, #472]	@ (80024fc <HAL_UART_RxCpltCallback+0x294>)
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
            previous_error = 0;
 800232a:	4b75      	ldr	r3, [pc, #468]	@ (8002500 <HAL_UART_RxCpltCallback+0x298>)
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
            j = 0;
 8002332:	4b74      	ldr	r3, [pc, #464]	@ (8002504 <HAL_UART_RxCpltCallback+0x29c>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
            case0_initial_push_count = 0;
 8002338:	4b75      	ldr	r3, [pc, #468]	@ (8002510 <HAL_UART_RxCpltCallback+0x2a8>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
            case0_initial_push_done = 0;
 800233e:	4b75      	ldr	r3, [pc, #468]	@ (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
            case1_delay_count = 0;
 8002344:	4b74      	ldr	r3, [pc, #464]	@ (8002518 <HAL_UART_RxCpltCallback+0x2b0>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
            case1_push_after_grab_done = 0;
 800234a:	4b74      	ldr	r3, [pc, #464]	@ (800251c <HAL_UART_RxCpltCallback+0x2b4>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
}
 8002350:	e120      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'v') {
 8002352:	4b5f      	ldr	r3, [pc, #380]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b76      	cmp	r3, #118	@ 0x76
 8002358:	d11c      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x12c>
            caseF_active = 0;
 800235a:	4b6b      	ldr	r3, [pc, #428]	@ (8002508 <HAL_UART_RxCpltCallback+0x2a0>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
            caseF_end_condition = 0;
 8002360:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <HAL_UART_RxCpltCallback+0x2a4>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
            uto = 'U';
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 8002368:	2255      	movs	r2, #85	@ 0x55
 800236a:	701a      	strb	r2, [r3, #0]
            last_command = 0;
 800236c:	4b5b      	ldr	r3, [pc, #364]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
            motor_ctr(0, 0);
 8002372:	2100      	movs	r1, #0
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fcb9 	bl	8000cec <motor_ctr>
            case0_initial_push_count = 0;
 800237a:	4b65      	ldr	r3, [pc, #404]	@ (8002510 <HAL_UART_RxCpltCallback+0x2a8>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
            case0_initial_push_done = 0;
 8002380:	4b64      	ldr	r3, [pc, #400]	@ (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
            case1_delay_count = 0;
 8002386:	4b64      	ldr	r3, [pc, #400]	@ (8002518 <HAL_UART_RxCpltCallback+0x2b0>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
            case1_push_after_grab_done = 0;
 800238c:	4b63      	ldr	r3, [pc, #396]	@ (800251c <HAL_UART_RxCpltCallback+0x2b4>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	e0ff      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'u') {
 8002394:	4b4e      	ldr	r3, [pc, #312]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b75      	cmp	r3, #117	@ 0x75
 800239a:	d14a      	bne.n	8002432 <HAL_UART_RxCpltCallback+0x1ca>
            uto = 'u';
 800239c:	4b52      	ldr	r3, [pc, #328]	@ (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 800239e:	2275      	movs	r2, #117	@ 0x75
 80023a0:	701a      	strb	r2, [r3, #0]
            caseF_active = 0;
 80023a2:	4b59      	ldr	r3, [pc, #356]	@ (8002508 <HAL_UART_RxCpltCallback+0x2a0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
            case2_reset_active = 0; // Reset the Case2Reset flag
 80023a8:	4b4d      	ldr	r3, [pc, #308]	@ (80024e0 <HAL_UART_RxCpltCallback+0x278>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
            last_command = 0;
 80023ae:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
            current_case = 0;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	@ (80024e4 <HAL_UART_RxCpltCallback+0x27c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
            has_grabbed = 0;
 80023ba:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <HAL_UART_RxCpltCallback+0x2b8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
            sensor_count = 0;
 80023c0:	4b58      	ldr	r3, [pc, #352]	@ (8002524 <HAL_UART_RxCpltCallback+0x2bc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
            integral = 0;
 80023c6:	4b4d      	ldr	r3, [pc, #308]	@ (80024fc <HAL_UART_RxCpltCallback+0x294>)
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
            previous_error = 0;
 80023ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002500 <HAL_UART_RxCpltCallback+0x298>)
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
            Kp = 2.5;
 80023d6:	4b54      	ldr	r3, [pc, #336]	@ (8002528 <HAL_UART_RxCpltCallback+0x2c0>)
 80023d8:	4a54      	ldr	r2, [pc, #336]	@ (800252c <HAL_UART_RxCpltCallback+0x2c4>)
 80023da:	601a      	str	r2, [r3, #0]
            Ki = 0.01;
 80023dc:	4b54      	ldr	r3, [pc, #336]	@ (8002530 <HAL_UART_RxCpltCallback+0x2c8>)
 80023de:	4a55      	ldr	r2, [pc, #340]	@ (8002534 <HAL_UART_RxCpltCallback+0x2cc>)
 80023e0:	601a      	str	r2, [r3, #0]
            Kd = 5.0;
 80023e2:	4b55      	ldr	r3, [pc, #340]	@ (8002538 <HAL_UART_RxCpltCallback+0x2d0>)
 80023e4:	4a55      	ldr	r2, [pc, #340]	@ (800253c <HAL_UART_RxCpltCallback+0x2d4>)
 80023e6:	601a      	str	r2, [r3, #0]
            j = 0;
 80023e8:	4b46      	ldr	r3, [pc, #280]	@ (8002504 <HAL_UART_RxCpltCallback+0x29c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
            speed_level = 7;
 80023ee:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
            Set_Servo_Angle(40);
 80023f4:	2028      	movs	r0, #40	@ 0x28
 80023f6:	f7fe f9a3 	bl	8000740 <Set_Servo_Angle>
            case1_delay_count = 0;
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_UART_RxCpltCallback+0x2b0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
            case2_stopped = 0;
 8002400:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <HAL_UART_RxCpltCallback+0x284>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
            case2_ignore_count = 0;
 8002406:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_UART_RxCpltCallback+0x288>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
            case2_post_stop_state = 0;
 800240c:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <HAL_UART_RxCpltCallback+0x28c>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
            case2_post_action_count = 0;
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <HAL_UART_RxCpltCallback+0x290>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
            case3_has_grabbed = 0;
 8002418:	4b4a      	ldr	r3, [pc, #296]	@ (8002544 <HAL_UART_RxCpltCallback+0x2dc>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
            case0_initial_push_count = 0;
 800241e:	4b3c      	ldr	r3, [pc, #240]	@ (8002510 <HAL_UART_RxCpltCallback+0x2a8>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
            case0_initial_push_done = 0;
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
            case1_push_after_grab_done = 0;
 800242a:	4b3c      	ldr	r3, [pc, #240]	@ (800251c <HAL_UART_RxCpltCallback+0x2b4>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	e0b0      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'U') {
 8002432:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b55      	cmp	r3, #85	@ 0x55
 8002438:	d118      	bne.n	800246c <HAL_UART_RxCpltCallback+0x204>
            uto = 'U';
 800243a:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 800243c:	2255      	movs	r2, #85	@ 0x55
 800243e:	701a      	strb	r2, [r3, #0]
            caseF_active = 0;
 8002440:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <HAL_UART_RxCpltCallback+0x2a0>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
            case2_reset_active = 0; // Reset the Case2Reset flag
 8002446:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <HAL_UART_RxCpltCallback+0x278>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
            last_command = 0;
 800244c:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
            case0_initial_push_count = 0;
 8002452:	4b2f      	ldr	r3, [pc, #188]	@ (8002510 <HAL_UART_RxCpltCallback+0x2a8>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
            case0_initial_push_done = 0;
 8002458:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <HAL_UART_RxCpltCallback+0x2ac>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
            case1_delay_count = 0;
 800245e:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <HAL_UART_RxCpltCallback+0x2b0>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
            case1_push_after_grab_done = 0;
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_UART_RxCpltCallback+0x2b4>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	e093      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (uto == 'U') {
 800246c:	4b1e      	ldr	r3, [pc, #120]	@ (80024e8 <HAL_UART_RxCpltCallback+0x280>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b55      	cmp	r3, #85	@ 0x55
 8002472:	d169      	bne.n	8002548 <HAL_UART_RxCpltCallback+0x2e0>
            if (rx_data >= '0' && rx_data <= '9') {
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b2f      	cmp	r3, #47	@ 0x2f
 800247a:	d910      	bls.n	800249e <HAL_UART_RxCpltCallback+0x236>
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b39      	cmp	r3, #57	@ 0x39
 8002482:	d80c      	bhi.n	800249e <HAL_UART_RxCpltCallback+0x236>
                speed_level = rx_data - '0';
 8002484:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	3b30      	subs	r3, #48	@ 0x30
 800248a:	4a2d      	ldr	r2, [pc, #180]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 800248c:	6013      	str	r3, [r2, #0]
                if (speed_level > 9) speed_level = 9;
 800248e:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b09      	cmp	r3, #9
 8002494:	dd7e      	ble.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
 8002496:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 8002498:	2209      	movs	r2, #9
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e07a      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
            else if (rx_data == 'q') {
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b71      	cmp	r3, #113	@ 0x71
 80024a4:	d10c      	bne.n	80024c0 <HAL_UART_RxCpltCallback+0x258>
                speed_level--;
 80024a6:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	4a24      	ldr	r2, [pc, #144]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 80024ae:	6013      	str	r3, [r2, #0]
                if (speed_level < 0) speed_level = 0;
 80024b0:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da6d      	bge.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
 80024b8:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_UART_RxCpltCallback+0x2d8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	e069      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
                last_command = rx_data;
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_UART_RxCpltCallback+0x268>)
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_UART_RxCpltCallback+0x274>)
 80024c6:	701a      	strb	r2, [r3, #0]
}
 80024c8:	e064      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
 80024ca:	bf00      	nop
 80024cc:	40013800 	.word	0x40013800
 80024d0:	200001a8 	.word	0x200001a8
 80024d4:	2000012c 	.word	0x2000012c
 80024d8:	200001aa 	.word	0x200001aa
 80024dc:	200001a9 	.word	0x200001a9
 80024e0:	200001ec 	.word	0x200001ec
 80024e4:	20000180 	.word	0x20000180
 80024e8:	20000024 	.word	0x20000024
 80024ec:	200001b0 	.word	0x200001b0
 80024f0:	200001b4 	.word	0x200001b4
 80024f4:	200001b8 	.word	0x200001b8
 80024f8:	200001bc 	.word	0x200001bc
 80024fc:	20000178 	.word	0x20000178
 8002500:	20000174 	.word	0x20000174
 8002504:	200001a4 	.word	0x200001a4
 8002508:	200001d4 	.word	0x200001d4
 800250c:	200001d8 	.word	0x200001d8
 8002510:	200001dc 	.word	0x200001dc
 8002514:	200001e0 	.word	0x200001e0
 8002518:	200001ac 	.word	0x200001ac
 800251c:	200001e4 	.word	0x200001e4
 8002520:	2000017c 	.word	0x2000017c
 8002524:	20000184 	.word	0x20000184
 8002528:	20000014 	.word	0x20000014
 800252c:	40200000 	.word	0x40200000
 8002530:	20000018 	.word	0x20000018
 8002534:	3c23d70a 	.word	0x3c23d70a
 8002538:	2000001c 	.word	0x2000001c
 800253c:	40a00000 	.word	0x40a00000
 8002540:	20000028 	.word	0x20000028
 8002544:	200001c0 	.word	0x200001c0
        else if (rx_data >= '0' && rx_data <= '9') {
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <HAL_UART_RxCpltCallback+0x334>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b2f      	cmp	r3, #47	@ 0x2f
 800254e:	d910      	bls.n	8002572 <HAL_UART_RxCpltCallback+0x30a>
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_UART_RxCpltCallback+0x334>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b39      	cmp	r3, #57	@ 0x39
 8002556:	d80c      	bhi.n	8002572 <HAL_UART_RxCpltCallback+0x30a>
            speed_level = rx_data - '0';
 8002558:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_UART_RxCpltCallback+0x334>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	3b30      	subs	r3, #48	@ 0x30
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 8002560:	6013      	str	r3, [r2, #0]
            if (speed_level > 9) speed_level = 9;
 8002562:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b09      	cmp	r3, #9
 8002568:	dd14      	ble.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 800256c:	2209      	movs	r2, #9
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e010      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
        else if (rx_data == 'q') {
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_UART_RxCpltCallback+0x334>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b71      	cmp	r3, #113	@ 0x71
 8002578:	d10c      	bne.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
            speed_level--;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	4a07      	ldr	r2, [pc, #28]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 8002582:	6013      	str	r3, [r2, #0]
            if (speed_level < 0) speed_level = 0;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	da03      	bge.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <HAL_UART_RxCpltCallback+0x338>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	e7ff      	b.n	8002594 <HAL_UART_RxCpltCallback+0x32c>
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200001a8 	.word	0x200001a8
 80025a0:	20000028 	.word	0x20000028

080025a4 <HAL_TIM_PeriodElapsedCallback>:

/* Modified Timer callback to handle Case2Reset */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b4:	d167      	bne.n	8002686 <HAL_TIM_PeriodElapsedCallback+0xe2>
        if (uto == 'u') {
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b75      	cmp	r3, #117	@ 0x75
 80025bc:	d12b      	bne.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x72>
            // Auto mode - execute line-following cases
            read_sensors();  // Update sensor values
 80025be:	f7fe fba5 	bl	8000d0c <read_sensors>
            if (current_case == 0) {
 80025c2:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
                followLine_Case0();
 80025ca:	f7fe fcb7 	bl	8000f3c <followLine_Case0>
 80025ce:	e045      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
            } else if (current_case == 1) {
 80025d0:	4b30      	ldr	r3, [pc, #192]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <HAL_TIM_PeriodElapsedCallback+0x3a>
                followLine_Case1();
 80025d8:	f7fe fdb4 	bl	8001144 <followLine_Case1>
 80025dc:	e03e      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
            } else if (current_case == 2) {
 80025de:	4b2d      	ldr	r3, [pc, #180]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d109      	bne.n	80025fa <HAL_TIM_PeriodElapsedCallback+0x56>
                // Check if we should use Case2Reset or normal Case2
                if (case2_reset_active) {
 80025e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_TIM_PeriodElapsedCallback+0x50>
                    followLine_Case2Reset();
 80025ee:	f7ff f859 	bl	80016a4 <followLine_Case2Reset>
 80025f2:	e033      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
                } else {
                    followLine_Case2();
 80025f4:	f7fe fe8a 	bl	800130c <followLine_Case2>
 80025f8:	e030      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
                }
            } else if (current_case == 3) {
 80025fa:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d102      	bne.n	8002608 <HAL_TIM_PeriodElapsedCallback+0x64>
                followLine_Case3();
 8002602:	f7ff fa2b 	bl	8001a5c <followLine_Case3>
 8002606:	e029      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
            }
            else if (current_case == 4){
 8002608:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d125      	bne.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
            	followLine_Case4();
 8002610:	f7ff fbc6 	bl	8001da0 <followLine_Case4>
 8002614:	e022      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>

            }
        }
        else if (uto == 'F') {
 8002616:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b46      	cmp	r3, #70	@ 0x46
 800261c:	d118      	bne.n	8002650 <HAL_TIM_PeriodElapsedCallback+0xac>
            // CaseF mode - execute CaseF line following
            read_sensors();      // Update sensor values
 800261e:	f7fe fb75 	bl	8000d0c <read_sensors>
            followLine_CaseF();  // Execute CaseF
 8002622:	f7ff fcb1 	bl	8001f88 <followLine_CaseF>

            // Check if CaseF should end and return to manual
            if (caseF_end_condition) {
 8002626:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
                caseF_active = 0;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
                caseF_end_condition = 0;
 8002634:	4b19      	ldr	r3, [pc, #100]	@ (800269c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
                uto = 'U';       // Return to manual mode
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800263c:	2255      	movs	r2, #85	@ 0x55
 800263e:	701a      	strb	r2, [r3, #0]
                last_command = 0;
 8002640:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
                motor_ctr(0, 0); // Stop motors
 8002646:	2100      	movs	r1, #0
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fb4f 	bl	8000cec <motor_ctr>
 800264e:	e005      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
            }
        }
        else if (uto == 'U') {
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b55      	cmp	r3, #85	@ 0x55
 8002656:	d101      	bne.n	800265c <HAL_TIM_PeriodElapsedCallback+0xb8>
            // Manual mode
            execute_command();
 8002658:	f7ff fd4a 	bl	80020f0 <execute_command>
        }

        // Handle gripper commands (works in all modes)
        if (grip == 'W') {
 800265c:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b57      	cmp	r3, #87	@ 0x57
 8002662:	d106      	bne.n	8002672 <HAL_TIM_PeriodElapsedCallback+0xce>
            Set_Servo_Angle(0);  // Close gripper
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f86b 	bl	8000740 <Set_Servo_Angle>
            grip = 0;            // Clear after execution
 800266a:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
        else if (grip == 'w') {
            Set_Servo_Angle(40); // Open gripper
            grip = 0;            // Clear after execution
        }
    }
}
 8002670:	e009      	b.n	8002686 <HAL_TIM_PeriodElapsedCallback+0xe2>
        else if (grip == 'w') {
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b77      	cmp	r3, #119	@ 0x77
 8002678:	d105      	bne.n	8002686 <HAL_TIM_PeriodElapsedCallback+0xe2>
            Set_Servo_Angle(40); // Open gripper
 800267a:	2028      	movs	r0, #40	@ 0x28
 800267c:	f7fe f860 	bl	8000740 <Set_Servo_Angle>
            grip = 0;            // Clear after execution
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000024 	.word	0x20000024
 8002694:	20000180 	.word	0x20000180
 8002698:	200001ec 	.word	0x200001ec
 800269c:	200001d8 	.word	0x200001d8
 80026a0:	200001d4 	.word	0x200001d4
 80026a4:	200001a9 	.word	0x200001a9
 80026a8:	200001aa 	.word	0x200001aa

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <Error_Handler+0x8>

080026b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_MspInit+0x5c>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <HAL_MspInit+0x5c>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6193      	str	r3, [r2, #24]
 80026ca:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_MspInit+0x5c>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <HAL_MspInit+0x5c>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a0e      	ldr	r2, [pc, #56]	@ (8002714 <HAL_MspInit+0x5c>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <HAL_MspInit+0x5c>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_MspInit+0x60>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <HAL_MspInit+0x60>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000

0800271c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272c:	d114      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272e:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <HAL_TIM_Base_MspInit+0x78>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <HAL_TIM_Base_MspInit+0x78>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_TIM_Base_MspInit+0x78>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	201c      	movs	r0, #28
 800274c:	f000 faad 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002750:	201c      	movs	r0, #28
 8002752:	f000 fac6 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002756:	e018      	b.n	800278a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0e      	ldr	r2, [pc, #56]	@ (8002798 <HAL_TIM_Base_MspInit+0x7c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d113      	bne.n	800278a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_TIM_Base_MspInit+0x78>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <HAL_TIM_Base_MspInit+0x78>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_TIM_Base_MspInit+0x78>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	201d      	movs	r0, #29
 8002780:	f000 fa93 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002784:	201d      	movs	r0, #29
 8002786:	f000 faac 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40000400 	.word	0x40000400

0800279c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a09      	ldr	r2, [pc, #36]	@ (80027d0 <HAL_TIM_PWM_MspInit+0x34>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10b      	bne.n	80027c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_TIM_PWM_MspInit+0x38>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a08      	ldr	r2, [pc, #32]	@ (80027d4 <HAL_TIM_PWM_MspInit+0x38>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	61d3      	str	r3, [r2, #28]
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_TIM_PWM_MspInit+0x38>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40021000 	.word	0x40021000

080027d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_TIM_MspPostInit+0xb8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d12a      	bne.n	800284e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	4b26      	ldr	r3, [pc, #152]	@ (8002894 <HAL_TIM_MspPostInit+0xbc>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a25      	ldr	r2, [pc, #148]	@ (8002894 <HAL_TIM_MspPostInit+0xbc>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <HAL_TIM_MspPostInit+0xbc>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002810:	2310      	movs	r3, #16
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4619      	mov	r1, r3
 8002822:	481d      	ldr	r0, [pc, #116]	@ (8002898 <HAL_TIM_MspPostInit+0xc0>)
 8002824:	f000 fb2a 	bl	8002e7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002828:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_TIM_MspPostInit+0xc4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002834:	627b      	str	r3, [r7, #36]	@ 0x24
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
 8002846:	4a15      	ldr	r2, [pc, #84]	@ (800289c <HAL_TIM_MspPostInit+0xc4>)
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800284c:	e01c      	b.n	8002888 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM4)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <HAL_TIM_MspPostInit+0xc8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d117      	bne.n	8002888 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <HAL_TIM_MspPostInit+0xbc>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a0d      	ldr	r2, [pc, #52]	@ (8002894 <HAL_TIM_MspPostInit+0xbc>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_TIM_MspPostInit+0xbc>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002870:	23c0      	movs	r3, #192	@ 0xc0
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <HAL_TIM_MspPostInit+0xc0>)
 8002884:	f000 fafa 	bl	8002e7c <HAL_GPIO_Init>
}
 8002888:	bf00      	nop
 800288a:	3728      	adds	r7, #40	@ 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40000400 	.word	0x40000400
 8002894:	40021000 	.word	0x40021000
 8002898:	40010c00 	.word	0x40010c00
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000800 	.word	0x40000800

080028a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a20      	ldr	r2, [pc, #128]	@ (8002940 <HAL_UART_MspInit+0x9c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d139      	bne.n	8002938 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002944 <HAL_UART_MspInit+0xa0>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002944 <HAL_UART_MspInit+0xa0>)
 80028ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002944 <HAL_UART_MspInit+0xa0>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_UART_MspInit+0xa0>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a18      	ldr	r2, [pc, #96]	@ (8002944 <HAL_UART_MspInit+0xa0>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <HAL_UART_MspInit+0xa0>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	4619      	mov	r1, r3
 8002908:	480f      	ldr	r0, [pc, #60]	@ (8002948 <HAL_UART_MspInit+0xa4>)
 800290a:	f000 fab7 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800290e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0310 	add.w	r3, r7, #16
 8002920:	4619      	mov	r1, r3
 8002922:	4809      	ldr	r0, [pc, #36]	@ (8002948 <HAL_UART_MspInit+0xa4>)
 8002924:	f000 faaa 	bl	8002e7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	2025      	movs	r0, #37	@ 0x25
 800292e:	f000 f9bc 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002932:	2025      	movs	r0, #37	@ 0x25
 8002934:	f000 f9d5 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40013800 	.word	0x40013800
 8002944:	40021000 	.word	0x40021000
 8002948:	40010800 	.word	0x40010800

0800294c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <NMI_Handler+0x4>

08002954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <MemManage_Handler+0x4>

08002964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <BusFault_Handler+0x4>

0800296c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <UsageFault_Handler+0x4>

08002974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f000 f892 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029a8:	4802      	ldr	r0, [pc, #8]	@ (80029b4 <TIM2_IRQHandler+0x10>)
 80029aa:	f001 f9bf 	bl	8003d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000054 	.word	0x20000054

080029b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <TIM3_IRQHandler+0x10>)
 80029be:	f001 f9b5 	bl	8003d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000009c 	.word	0x2000009c

080029cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <USART1_IRQHandler+0x10>)
 80029d2:	f001 ffdf 	bl	8004994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000012c 	.word	0x2000012c

080029e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029ec:	f7ff fff8 	bl	80029e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029f0:	480b      	ldr	r0, [pc, #44]	@ (8002a20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029f2:	490c      	ldr	r1, [pc, #48]	@ (8002a24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <LoopFillZerobss+0x16>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a08:	4c09      	ldr	r4, [pc, #36]	@ (8002a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a16:	f002 fcd7 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a1a:	f7fd feb3 	bl	8000784 <main>
  bx lr
 8002a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002a28:	0800545c 	.word	0x0800545c
  ldr r2, =_sbss
 8002a2c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002a30:	200001fc 	.word	0x200001fc

08002a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC1_2_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <HAL_Init+0x28>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <HAL_Init+0x28>)
 8002a42:	f043 0310 	orr.w	r3, r3, #16
 8002a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 f923 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f000 f808 	bl	8002a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a54:	f7ff fe30 	bl	80026b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40022000 	.word	0x40022000

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_InitTick+0x54>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_InitTick+0x58>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f93b 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00e      	b.n	8002ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d80a      	bhi.n	8002aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f000 f903 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4a06      	ldr	r2, [pc, #24]	@ (8002ac0 <HAL_InitTick+0x5c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	2000002c 	.word	0x2000002c
 8002abc:	20000034 	.word	0x20000034
 8002ac0:	20000030 	.word	0x20000030

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_IncTick+0x20>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a03      	ldr	r2, [pc, #12]	@ (8002ae4 <HAL_IncTick+0x20>)
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000034 	.word	0x20000034
 8002ae4:	200001f8 	.word	0x200001f8

08002ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b02      	ldr	r3, [pc, #8]	@ (8002af8 <HAL_GetTick+0x10>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	200001f8 	.word	0x200001f8

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4906      	ldr	r1, [pc, #24]	@ (8002b94 <__NVIC_EnableIRQ+0x34>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff90 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff2d 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff42 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff90 	bl	8002bec <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5f 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff35 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d008      	beq.n	8002d40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2204      	movs	r2, #4
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e020      	b.n	8002d82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 020e 	bic.w	r2, r2, #14
 8002d4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2204      	movs	r2, #4
 8002da8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e051      	b.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 020e 	bic.w	r2, r2, #14
 8002dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <HAL_DMA_Abort_IT+0xd4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d029      	beq.n	8002e2e <HAL_DMA_Abort_IT+0xa2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <HAL_DMA_Abort_IT+0xd8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d022      	beq.n	8002e2a <HAL_DMA_Abort_IT+0x9e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <HAL_DMA_Abort_IT+0xdc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01a      	beq.n	8002e24 <HAL_DMA_Abort_IT+0x98>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e6c <HAL_DMA_Abort_IT+0xe0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d012      	beq.n	8002e1e <HAL_DMA_Abort_IT+0x92>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e70 <HAL_DMA_Abort_IT+0xe4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00a      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x8c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1b      	ldr	r2, [pc, #108]	@ (8002e74 <HAL_DMA_Abort_IT+0xe8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d102      	bne.n	8002e12 <HAL_DMA_Abort_IT+0x86>
 8002e0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e10:	e00e      	b.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
 8002e12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e16:	e00b      	b.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
 8002e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e1c:	e008      	b.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
 8002e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e22:	e005      	b.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
 8002e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e28:	e002      	b.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	e000      	b.n	8002e30 <HAL_DMA_Abort_IT+0xa4>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4a11      	ldr	r2, [pc, #68]	@ (8002e78 <HAL_DMA_Abort_IT+0xec>)
 8002e32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
    } 
  }
  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40020008 	.word	0x40020008
 8002e64:	4002001c 	.word	0x4002001c
 8002e68:	40020030 	.word	0x40020030
 8002e6c:	40020044 	.word	0x40020044
 8002e70:	40020058 	.word	0x40020058
 8002e74:	4002006c 	.word	0x4002006c
 8002e78:	40020000 	.word	0x40020000

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b08b      	sub	sp, #44	@ 0x2c
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8e:	e169      	b.n	8003164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e90:	2201      	movs	r2, #1
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8158 	bne.w	800315e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a9a      	ldr	r2, [pc, #616]	@ (800311c <HAL_GPIO_Init+0x2a0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d05e      	beq.n	8002f76 <HAL_GPIO_Init+0xfa>
 8002eb8:	4a98      	ldr	r2, [pc, #608]	@ (800311c <HAL_GPIO_Init+0x2a0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d875      	bhi.n	8002faa <HAL_GPIO_Init+0x12e>
 8002ebe:	4a98      	ldr	r2, [pc, #608]	@ (8003120 <HAL_GPIO_Init+0x2a4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d058      	beq.n	8002f76 <HAL_GPIO_Init+0xfa>
 8002ec4:	4a96      	ldr	r2, [pc, #600]	@ (8003120 <HAL_GPIO_Init+0x2a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d86f      	bhi.n	8002faa <HAL_GPIO_Init+0x12e>
 8002eca:	4a96      	ldr	r2, [pc, #600]	@ (8003124 <HAL_GPIO_Init+0x2a8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d052      	beq.n	8002f76 <HAL_GPIO_Init+0xfa>
 8002ed0:	4a94      	ldr	r2, [pc, #592]	@ (8003124 <HAL_GPIO_Init+0x2a8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d869      	bhi.n	8002faa <HAL_GPIO_Init+0x12e>
 8002ed6:	4a94      	ldr	r2, [pc, #592]	@ (8003128 <HAL_GPIO_Init+0x2ac>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04c      	beq.n	8002f76 <HAL_GPIO_Init+0xfa>
 8002edc:	4a92      	ldr	r2, [pc, #584]	@ (8003128 <HAL_GPIO_Init+0x2ac>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d863      	bhi.n	8002faa <HAL_GPIO_Init+0x12e>
 8002ee2:	4a92      	ldr	r2, [pc, #584]	@ (800312c <HAL_GPIO_Init+0x2b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d046      	beq.n	8002f76 <HAL_GPIO_Init+0xfa>
 8002ee8:	4a90      	ldr	r2, [pc, #576]	@ (800312c <HAL_GPIO_Init+0x2b0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d85d      	bhi.n	8002faa <HAL_GPIO_Init+0x12e>
 8002eee:	2b12      	cmp	r3, #18
 8002ef0:	d82a      	bhi.n	8002f48 <HAL_GPIO_Init+0xcc>
 8002ef2:	2b12      	cmp	r3, #18
 8002ef4:	d859      	bhi.n	8002faa <HAL_GPIO_Init+0x12e>
 8002ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8002efc <HAL_GPIO_Init+0x80>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f77 	.word	0x08002f77
 8002f00:	08002f51 	.word	0x08002f51
 8002f04:	08002f63 	.word	0x08002f63
 8002f08:	08002fa5 	.word	0x08002fa5
 8002f0c:	08002fab 	.word	0x08002fab
 8002f10:	08002fab 	.word	0x08002fab
 8002f14:	08002fab 	.word	0x08002fab
 8002f18:	08002fab 	.word	0x08002fab
 8002f1c:	08002fab 	.word	0x08002fab
 8002f20:	08002fab 	.word	0x08002fab
 8002f24:	08002fab 	.word	0x08002fab
 8002f28:	08002fab 	.word	0x08002fab
 8002f2c:	08002fab 	.word	0x08002fab
 8002f30:	08002fab 	.word	0x08002fab
 8002f34:	08002fab 	.word	0x08002fab
 8002f38:	08002fab 	.word	0x08002fab
 8002f3c:	08002fab 	.word	0x08002fab
 8002f40:	08002f59 	.word	0x08002f59
 8002f44:	08002f6d 	.word	0x08002f6d
 8002f48:	4a79      	ldr	r2, [pc, #484]	@ (8003130 <HAL_GPIO_Init+0x2b4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f4e:	e02c      	b.n	8002faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	623b      	str	r3, [r7, #32]
          break;
 8002f56:	e029      	b.n	8002fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	623b      	str	r3, [r7, #32]
          break;
 8002f60:	e024      	b.n	8002fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	3308      	adds	r3, #8
 8002f68:	623b      	str	r3, [r7, #32]
          break;
 8002f6a:	e01f      	b.n	8002fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	330c      	adds	r3, #12
 8002f72:	623b      	str	r3, [r7, #32]
          break;
 8002f74:	e01a      	b.n	8002fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	623b      	str	r3, [r7, #32]
          break;
 8002f82:	e013      	b.n	8002fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	611a      	str	r2, [r3, #16]
          break;
 8002f96:	e009      	b.n	8002fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f98:	2308      	movs	r3, #8
 8002f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	615a      	str	r2, [r3, #20]
          break;
 8002fa2:	e003      	b.n	8002fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
          break;
 8002fa8:	e000      	b.n	8002fac <HAL_GPIO_Init+0x130>
          break;
 8002faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2bff      	cmp	r3, #255	@ 0xff
 8002fb0:	d801      	bhi.n	8002fb6 <HAL_GPIO_Init+0x13a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	e001      	b.n	8002fba <HAL_GPIO_Init+0x13e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2bff      	cmp	r3, #255	@ 0xff
 8002fc0:	d802      	bhi.n	8002fc8 <HAL_GPIO_Init+0x14c>
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0x152>
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	3b08      	subs	r3, #8
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	210f      	movs	r1, #15
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80b1 	beq.w	800315e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_GPIO_Init+0x2b8>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4a4c      	ldr	r2, [pc, #304]	@ (8003134 <HAL_GPIO_Init+0x2b8>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6193      	str	r3, [r2, #24]
 8003008:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <HAL_GPIO_Init+0x2b8>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003014:	4a48      	ldr	r2, [pc, #288]	@ (8003138 <HAL_GPIO_Init+0x2bc>)
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a40      	ldr	r2, [pc, #256]	@ (800313c <HAL_GPIO_Init+0x2c0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d013      	beq.n	8003068 <HAL_GPIO_Init+0x1ec>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3f      	ldr	r2, [pc, #252]	@ (8003140 <HAL_GPIO_Init+0x2c4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00d      	beq.n	8003064 <HAL_GPIO_Init+0x1e8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a3e      	ldr	r2, [pc, #248]	@ (8003144 <HAL_GPIO_Init+0x2c8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <HAL_GPIO_Init+0x1e4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3d      	ldr	r2, [pc, #244]	@ (8003148 <HAL_GPIO_Init+0x2cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_GPIO_Init+0x1e0>
 8003058:	2303      	movs	r3, #3
 800305a:	e006      	b.n	800306a <HAL_GPIO_Init+0x1ee>
 800305c:	2304      	movs	r3, #4
 800305e:	e004      	b.n	800306a <HAL_GPIO_Init+0x1ee>
 8003060:	2302      	movs	r3, #2
 8003062:	e002      	b.n	800306a <HAL_GPIO_Init+0x1ee>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_GPIO_Init+0x1ee>
 8003068:	2300      	movs	r3, #0
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	f002 0203 	and.w	r2, r2, #3
 8003070:	0092      	lsls	r2, r2, #2
 8003072:	4093      	lsls	r3, r2
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800307a:	492f      	ldr	r1, [pc, #188]	@ (8003138 <HAL_GPIO_Init+0x2bc>)
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003094:	4b2d      	ldr	r3, [pc, #180]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	492c      	ldr	r1, [pc, #176]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
 80030a0:	e006      	b.n	80030b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030a2:	4b2a      	ldr	r3, [pc, #168]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	4928      	ldr	r1, [pc, #160]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030bc:	4b23      	ldr	r3, [pc, #140]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4922      	ldr	r1, [pc, #136]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ca:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	491e      	ldr	r1, [pc, #120]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4918      	ldr	r1, [pc, #96]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030f2:	4b16      	ldr	r3, [pc, #88]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	4914      	ldr	r1, [pc, #80]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d021      	beq.n	8003150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800310c:	4b0f      	ldr	r3, [pc, #60]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	490e      	ldr	r1, [pc, #56]	@ (800314c <HAL_GPIO_Init+0x2d0>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	e021      	b.n	800315e <HAL_GPIO_Init+0x2e2>
 800311a:	bf00      	nop
 800311c:	10320000 	.word	0x10320000
 8003120:	10310000 	.word	0x10310000
 8003124:	10220000 	.word	0x10220000
 8003128:	10210000 	.word	0x10210000
 800312c:	10120000 	.word	0x10120000
 8003130:	10110000 	.word	0x10110000
 8003134:	40021000 	.word	0x40021000
 8003138:	40010000 	.word	0x40010000
 800313c:	40010800 	.word	0x40010800
 8003140:	40010c00 	.word	0x40010c00
 8003144:	40011000 	.word	0x40011000
 8003148:	40011400 	.word	0x40011400
 800314c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_GPIO_Init+0x304>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	43db      	mvns	r3, r3
 8003158:	4909      	ldr	r1, [pc, #36]	@ (8003180 <HAL_GPIO_Init+0x304>)
 800315a:	4013      	ands	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	3301      	adds	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f ae8e 	bne.w	8002e90 <HAL_GPIO_Init+0x14>
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	372c      	adds	r7, #44	@ 0x2c
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	807b      	strh	r3, [r7, #2]
 80031be:	4613      	mov	r3, r2
 80031c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c2:	787b      	ldrb	r3, [r7, #1]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ce:	e003      	b.n	80031d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	041a      	lsls	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	611a      	str	r2, [r3, #16]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e272      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8087 	beq.w	8003312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003204:	4b92      	ldr	r3, [pc, #584]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b04      	cmp	r3, #4
 800320e:	d00c      	beq.n	800322a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003210:	4b8f      	ldr	r3, [pc, #572]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d112      	bne.n	8003242 <HAL_RCC_OscConfig+0x5e>
 800321c:	4b8c      	ldr	r3, [pc, #560]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003228:	d10b      	bne.n	8003242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322a:	4b89      	ldr	r3, [pc, #548]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d06c      	beq.n	8003310 <HAL_RCC_OscConfig+0x12c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d168      	bne.n	8003310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e24c      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x76>
 800324c:	4b80      	ldr	r3, [pc, #512]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7f      	ldr	r2, [pc, #508]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e02e      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x98>
 8003262:	4b7b      	ldr	r3, [pc, #492]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7a      	ldr	r2, [pc, #488]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b78      	ldr	r3, [pc, #480]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a77      	ldr	r2, [pc, #476]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0xbc>
 8003286:	4b72      	ldr	r3, [pc, #456]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a71      	ldr	r2, [pc, #452]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b6f      	ldr	r3, [pc, #444]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6e      	ldr	r2, [pc, #440]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xd4>
 80032a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b68      	ldr	r3, [pc, #416]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a67      	ldr	r2, [pc, #412]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff fc12 	bl	8002ae8 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff fc0e 	bl	8002ae8 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e200      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b5d      	ldr	r3, [pc, #372]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xe4>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff fbfe 	bl	8002ae8 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff fbfa 	bl	8002ae8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1ec      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x10c>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d063      	beq.n	80033e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331e:	4b4c      	ldr	r3, [pc, #304]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800332a:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d11c      	bne.n	8003370 <HAL_RCC_OscConfig+0x18c>
 8003336:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	4b43      	ldr	r3, [pc, #268]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x176>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1c0      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335a:	4b3d      	ldr	r3, [pc, #244]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4939      	ldr	r1, [pc, #228]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	e03a      	b.n	80033e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003378:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <HAL_RCC_OscConfig+0x270>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7ff fbb3 	bl	8002ae8 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003386:	f7ff fbaf 	bl	8002ae8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e1a1      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	4b2d      	ldr	r3, [pc, #180]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4927      	ldr	r1, [pc, #156]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b26      	ldr	r3, [pc, #152]	@ (8003454 <HAL_RCC_OscConfig+0x270>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff fb92 	bl	8002ae8 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c8:	f7ff fb8e 	bl	8002ae8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e180      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d03a      	beq.n	8003468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d019      	beq.n	800342e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <HAL_RCC_OscConfig+0x274>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003400:	f7ff fb72 	bl	8002ae8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003408:	f7ff fb6e 	bl	8002ae8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e160      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <HAL_RCC_OscConfig+0x26c>)
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003426:	2001      	movs	r0, #1
 8003428:	f000 face 	bl	80039c8 <RCC_Delay>
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342e:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <HAL_RCC_OscConfig+0x274>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003434:	f7ff fb58 	bl	8002ae8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343a:	e00f      	b.n	800345c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343c:	f7ff fb54 	bl	8002ae8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d908      	bls.n	800345c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e146      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	42420000 	.word	0x42420000
 8003458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b92      	ldr	r3, [pc, #584]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e9      	bne.n	800343c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a6 	beq.w	80035c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b8b      	ldr	r3, [pc, #556]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b88      	ldr	r3, [pc, #544]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4a87      	ldr	r2, [pc, #540]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003490:	61d3      	str	r3, [r2, #28]
 8003492:	4b85      	ldr	r3, [pc, #532]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	4b82      	ldr	r3, [pc, #520]	@ (80036ac <HAL_RCC_OscConfig+0x4c8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d118      	bne.n	80034e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4b7f      	ldr	r3, [pc, #508]	@ (80036ac <HAL_RCC_OscConfig+0x4c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ac <HAL_RCC_OscConfig+0x4c8>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7ff fb15 	bl	8002ae8 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7ff fb11 	bl	8002ae8 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b64      	cmp	r3, #100	@ 0x64
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e103      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b75      	ldr	r3, [pc, #468]	@ (80036ac <HAL_RCC_OscConfig+0x4c8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x312>
 80034e8:	4b6f      	ldr	r3, [pc, #444]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a6e      	ldr	r2, [pc, #440]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	e02d      	b.n	8003552 <HAL_RCC_OscConfig+0x36e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x334>
 80034fe:	4b6a      	ldr	r3, [pc, #424]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a69      	ldr	r2, [pc, #420]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6213      	str	r3, [r2, #32]
 800350a:	4b67      	ldr	r3, [pc, #412]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a66      	ldr	r2, [pc, #408]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	6213      	str	r3, [r2, #32]
 8003516:	e01c      	b.n	8003552 <HAL_RCC_OscConfig+0x36e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d10c      	bne.n	800353a <HAL_RCC_OscConfig+0x356>
 8003520:	4b61      	ldr	r3, [pc, #388]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4a60      	ldr	r2, [pc, #384]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	f043 0304 	orr.w	r3, r3, #4
 800352a:	6213      	str	r3, [r2, #32]
 800352c:	4b5e      	ldr	r3, [pc, #376]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4a5d      	ldr	r2, [pc, #372]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6213      	str	r3, [r2, #32]
 8003538:	e00b      	b.n	8003552 <HAL_RCC_OscConfig+0x36e>
 800353a:	4b5b      	ldr	r3, [pc, #364]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a5a      	ldr	r2, [pc, #360]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	4b58      	ldr	r3, [pc, #352]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a57      	ldr	r2, [pc, #348]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d015      	beq.n	8003586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355a:	f7ff fac5 	bl	8002ae8 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7ff fac1 	bl	8002ae8 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0b1      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	4b4b      	ldr	r3, [pc, #300]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RCC_OscConfig+0x37e>
 8003584:	e014      	b.n	80035b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7ff faaf 	bl	8002ae8 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7ff faab 	bl	8002ae8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e09b      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a4:	4b40      	ldr	r3, [pc, #256]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ee      	bne.n	800358e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b6:	4b3c      	ldr	r3, [pc, #240]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8087 	beq.w	80036da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035cc:	4b36      	ldr	r3, [pc, #216]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d061      	beq.n	800369c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d146      	bne.n	800366e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e0:	4b33      	ldr	r3, [pc, #204]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7ff fa7f 	bl	8002ae8 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ee:	f7ff fa7b 	bl	8002ae8 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e06d      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003600:	4b29      	ldr	r3, [pc, #164]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f0      	bne.n	80035ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003614:	d108      	bne.n	8003628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003616:	4b24      	ldr	r3, [pc, #144]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	4921      	ldr	r1, [pc, #132]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003628:	4b1f      	ldr	r3, [pc, #124]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a19      	ldr	r1, [r3, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	430b      	orrs	r3, r1
 800363a:	491b      	ldr	r1, [pc, #108]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003640:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7ff fa4f 	bl	8002ae8 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364e:	f7ff fa4b 	bl	8002ae8 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e03d      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x46a>
 800366c:	e035      	b.n	80036da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366e:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <HAL_RCC_OscConfig+0x4cc>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7ff fa38 	bl	8002ae8 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7ff fa34 	bl	8002ae8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e026      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368e:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x498>
 800369a:	e01e      	b.n	80036da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d107      	bne.n	80036b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e019      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40007000 	.word	0x40007000
 80036b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCC_OscConfig+0x500>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40021000 	.word	0x40021000

080036e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0d0      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b6a      	ldr	r3, [pc, #424]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d910      	bls.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b67      	ldr	r3, [pc, #412]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4965      	ldr	r1, [pc, #404]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a58      	ldr	r2, [pc, #352]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800374e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a52      	ldr	r2, [pc, #328]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d040      	beq.n	8003808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e073      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b3d      	ldr	r3, [pc, #244]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06b      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b39      	ldr	r3, [pc, #228]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4936      	ldr	r1, [pc, #216]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7ff f986 	bl	8002ae8 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7ff f982 	bl	8002ae8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e053      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2d      	ldr	r3, [pc, #180]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b27      	ldr	r3, [pc, #156]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d210      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b24      	ldr	r3, [pc, #144]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4922      	ldr	r1, [pc, #136]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f821 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490a      	ldr	r1, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff f8e4 	bl	8002a64 <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08005428 	.word	0x08005428
 80038b4:	2000002c 	.word	0x2000002c
 80038b8:	20000030 	.word	0x20000030

080038bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x94>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d002      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x30>
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d003      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0x36>
 80038ea:	e027      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ee:	613b      	str	r3, [r7, #16]
      break;
 80038f0:	e027      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	0c9b      	lsrs	r3, r3, #18
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038fc:	5cd3      	ldrb	r3, [r2, r3]
 80038fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800390a:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x94>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0c5b      	lsrs	r3, r3, #17
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	4a11      	ldr	r2, [pc, #68]	@ (800395c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0d      	ldr	r2, [pc, #52]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x98>)
 800391e:	fb03 f202 	mul.w	r2, r3, r2
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e004      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0c      	ldr	r2, [pc, #48]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	613b      	str	r3, [r7, #16]
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x98>)
 800393e:	613b      	str	r3, [r7, #16]
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	693b      	ldr	r3, [r7, #16]
}
 8003944:	4618      	mov	r0, r3
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	007a1200 	.word	0x007a1200
 8003958:	08005440 	.word	0x08005440
 800395c:	08005450 	.word	0x08005450
 8003960:	003d0900 	.word	0x003d0900

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b02      	ldr	r3, [pc, #8]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x10>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	2000002c 	.word	0x2000002c

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff2 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	08005438 	.word	0x08005438

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039a4:	f7ff ffde 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0adb      	lsrs	r3, r3, #11
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08005438 	.word	0x08005438

080039c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <RCC_Delay+0x34>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a00 <RCC_Delay+0x38>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0a5b      	lsrs	r3, r3, #9
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e4:	bf00      	nop
  }
  while (Delay --);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e5a      	subs	r2, r3, #1
 80039ea:	60fa      	str	r2, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f9      	bne.n	80039e4 <RCC_Delay+0x1c>
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	2000002c 	.word	0x2000002c
 8003a00:	10624dd3 	.word	0x10624dd3

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e041      	b.n	8003a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fe fe76 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fc10 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e03a      	b.n	8003b32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <HAL_TIM_Base_Start_IT+0x98>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x58>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae6:	d009      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x58>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <HAL_TIM_Base_Start_IT+0x9c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x58>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a13      	ldr	r2, [pc, #76]	@ (8003b44 <HAL_TIM_Base_Start_IT+0xa0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d111      	bne.n	8003b20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b06      	cmp	r3, #6
 8003b0c:	d010      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1e:	e007      	b.n	8003b30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800

08003b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e041      	b.n	8003bde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fe14 	bl	800279c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4619      	mov	r1, r3
 8003b86:	4610      	mov	r0, r2
 8003b88:	f000 fb6e 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d109      	bne.n	8003c0c <HAL_TIM_PWM_Start+0x24>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	bf14      	ite	ne
 8003c04:	2301      	movne	r3, #1
 8003c06:	2300      	moveq	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e022      	b.n	8003c52 <HAL_TIM_PWM_Start+0x6a>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d109      	bne.n	8003c26 <HAL_TIM_PWM_Start+0x3e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e015      	b.n	8003c52 <HAL_TIM_PWM_Start+0x6a>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d109      	bne.n	8003c40 <HAL_TIM_PWM_Start+0x58>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e008      	b.n	8003c52 <HAL_TIM_PWM_Start+0x6a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e05e      	b.n	8003d18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x82>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c68:	e013      	b.n	8003c92 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Start+0x92>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c78:	e00b      	b.n	8003c92 <HAL_TIM_PWM_Start+0xaa>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_PWM_Start+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c88:	e003      	b.n	8003c92 <HAL_TIM_PWM_Start+0xaa>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	6839      	ldr	r1, [r7, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd70 	bl	8004780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <HAL_TIM_PWM_Start+0x138>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d107      	bne.n	8003cba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <HAL_TIM_PWM_Start+0x138>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xfa>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d009      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xfa>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <HAL_TIM_PWM_Start+0x13c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_TIM_PWM_Start+0xfa>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <HAL_TIM_PWM_Start+0x140>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d111      	bne.n	8003d06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d010      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	e007      	b.n	8003d16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800

08003d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d020      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01b      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0202 	mvn.w	r2, #2
 8003d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa5a 	bl	8004230 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa4d 	bl	800421e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fa5c 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d020      	beq.n	8003ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0204 	mvn.w	r2, #4
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa34 	bl	8004230 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa27 	bl	800421e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fa36 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d020      	beq.n	8003e28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01b      	beq.n	8003e28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0208 	mvn.w	r2, #8
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa0e 	bl	8004230 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa01 	bl	800421e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fa10 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0210 	mvn.w	r2, #16
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9e8 	bl	8004230 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9db 	bl	800421e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f9ea 	bl	8004242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00c      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0201 	mvn.w	r2, #1
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe fb86 	bl	80025a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d007      	beq.n	8003ebc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fced 	bl	8004896 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9ba 	bl	8004254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0220 	mvn.w	r2, #32
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fcc0 	bl	8004884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0ae      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	f200 809f 	bhi.w	8004078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08004079 	.word	0x08004079
 8003f48:	08004079 	.word	0x08004079
 8003f4c:	08004079 	.word	0x08004079
 8003f50:	08003fb5 	.word	0x08003fb5
 8003f54:	08004079 	.word	0x08004079
 8003f58:	08004079 	.word	0x08004079
 8003f5c:	08004079 	.word	0x08004079
 8003f60:	08003ff7 	.word	0x08003ff7
 8003f64:	08004079 	.word	0x08004079
 8003f68:	08004079 	.word	0x08004079
 8003f6c:	08004079 	.word	0x08004079
 8003f70:	08004037 	.word	0x08004037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f9e2 	bl	8004344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6999      	ldr	r1, [r3, #24]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
      break;
 8003fb2:	e064      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fa28 	bl	8004410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6999      	ldr	r1, [r3, #24]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	619a      	str	r2, [r3, #24]
      break;
 8003ff4:	e043      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fa71 	bl	80044e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0208 	orr.w	r2, r2, #8
 8004010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0204 	bic.w	r2, r2, #4
 8004020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69d9      	ldr	r1, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	61da      	str	r2, [r3, #28]
      break;
 8004034:	e023      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fabb 	bl	80045b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69d9      	ldr	r1, [r3, #28]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
      break;
 8004076:	e002      	b.n	800407e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	75fb      	strb	r3, [r7, #23]
      break;
 800407c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_TIM_ConfigClockSource+0x1c>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0b4      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x186>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e4:	d03e      	beq.n	8004164 <HAL_TIM_ConfigClockSource+0xd4>
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ea:	f200 8087 	bhi.w	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f2:	f000 8086 	beq.w	8004202 <HAL_TIM_ConfigClockSource+0x172>
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040fa:	d87f      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b70      	cmp	r3, #112	@ 0x70
 80040fe:	d01a      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0xa6>
 8004100:	2b70      	cmp	r3, #112	@ 0x70
 8004102:	d87b      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b60      	cmp	r3, #96	@ 0x60
 8004106:	d050      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x11a>
 8004108:	2b60      	cmp	r3, #96	@ 0x60
 800410a:	d877      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b50      	cmp	r3, #80	@ 0x50
 800410e:	d03c      	beq.n	800418a <HAL_TIM_ConfigClockSource+0xfa>
 8004110:	2b50      	cmp	r3, #80	@ 0x50
 8004112:	d873      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	d058      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x13a>
 8004118:	2b40      	cmp	r3, #64	@ 0x40
 800411a:	d86f      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b30      	cmp	r3, #48	@ 0x30
 800411e:	d064      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	2b30      	cmp	r3, #48	@ 0x30
 8004122:	d86b      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d060      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b20      	cmp	r3, #32
 800412a:	d867      	bhi.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d05c      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	2b10      	cmp	r3, #16
 8004132:	d05a      	beq.n	80041ea <HAL_TIM_ConfigClockSource+0x15a>
 8004134:	e062      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004146:	f000 fafc 	bl	8004742 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	609a      	str	r2, [r3, #8]
      break;
 8004162:	e04f      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004174:	f000 fae5 	bl	8004742 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004186:	609a      	str	r2, [r3, #8]
      break;
 8004188:	e03c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fa5c 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2150      	movs	r1, #80	@ 0x50
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fab3 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80041a8:	e02c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 fa7a 	bl	80046b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2160      	movs	r1, #96	@ 0x60
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 faa3 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80041c8:	e01c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d6:	461a      	mov	r2, r3
 80041d8:	f000 fa3c 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2140      	movs	r1, #64	@ 0x40
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fa93 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80041e8:	e00c      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f000 fa8a 	bl	800470e <TIM_ITRx_SetConfig>
      break;
 80041fa:	e003      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e000      	b.n	8004204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
	...

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2f      	ldr	r2, [pc, #188]	@ (8004338 <TIM_Base_SetConfig+0xd0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00b      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d007      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2c      	ldr	r2, [pc, #176]	@ (800433c <TIM_Base_SetConfig+0xd4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_Base_SetConfig+0x30>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a2b      	ldr	r2, [pc, #172]	@ (8004340 <TIM_Base_SetConfig+0xd8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d108      	bne.n	80042aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a22      	ldr	r2, [pc, #136]	@ (8004338 <TIM_Base_SetConfig+0xd0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <TIM_Base_SetConfig+0xd4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <TIM_Base_SetConfig+0xd8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0d      	ldr	r2, [pc, #52]	@ (8004338 <TIM_Base_SetConfig+0xd0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	611a      	str	r2, [r3, #16]
  }
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800

08004344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f023 0201 	bic.w	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 0302 	bic.w	r3, r3, #2
 800438c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1c      	ldr	r2, [pc, #112]	@ (800440c <TIM_OC1_SetConfig+0xc8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10c      	bne.n	80043ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0308 	bic.w	r3, r3, #8
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 0304 	bic.w	r3, r3, #4
 80043b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <TIM_OC1_SetConfig+0xc8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d111      	bne.n	80043e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40012c00 	.word	0x40012c00

08004410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f023 0210 	bic.w	r2, r3, #16
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0320 	bic.w	r3, r3, #32
 800445a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1d      	ldr	r2, [pc, #116]	@ (80044e0 <TIM_OC2_SetConfig+0xd0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10d      	bne.n	800448c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800448a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <TIM_OC2_SetConfig+0xd0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d113      	bne.n	80044bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800449a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00

080044e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800452c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <TIM_OC3_SetConfig+0xd0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10d      	bne.n	800455e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800455c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a14      	ldr	r2, [pc, #80]	@ (80045b4 <TIM_OC3_SetConfig+0xd0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d113      	bne.n	800458e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800456c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40012c00 	.word	0x40012c00

080045b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0f      	ldr	r2, [pc, #60]	@ (8004650 <TIM_OC4_SetConfig+0x98>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d109      	bne.n	800462c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800461e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00

08004654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0210 	bic.w	r2, r3, #16
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	031b      	lsls	r3, r3, #12
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	f043 0307 	orr.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004742:	b480      	push	{r7}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800475c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	431a      	orrs	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e046      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800482c:	d009      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a12      	ldr	r2, [pc, #72]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a10      	ldr	r2, [pc, #64]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10c      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800

08004884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e042      	b.n	8004940 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd ffe8 	bl	80028a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	@ 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fcd5 	bl	800529c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b20      	cmp	r3, #32
 8004960:	d112      	bne.n	8004988 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_Receive_IT+0x26>
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e00b      	b.n	800498a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	461a      	mov	r2, r3
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fab7 	bl	8004ef2 <UART_Start_Receive_IT>
 8004984:	4603      	mov	r3, r0
 8004986:	e000      	b.n	800498a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b0ba      	sub	sp, #232	@ 0xe8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_UART_IRQHandler+0x66>
 80049e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fb93 	bl	800511e <UART_Receive_IT>
      return;
 80049f8:	e25b      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80de 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x22c>
 8004a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80d1 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HAL_UART_IRQHandler+0xae>
 8004a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	f043 0201 	orr.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_UART_IRQHandler+0xd2>
 8004a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	f043 0202 	orr.w	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_UART_IRQHandler+0xf6>
 8004a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f043 0204 	orr.w	r2, r3, #4
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d011      	beq.n	8004aba <HAL_UART_IRQHandler+0x126>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0208 	orr.w	r2, r3, #8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 81f2 	beq.w	8004ea8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x14e>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb1e 	bl	800511e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <HAL_UART_IRQHandler+0x17a>
 8004b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d04f      	beq.n	8004bae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa28 	bl	8004f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d041      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3314      	adds	r3, #20
 8004b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1d9      	bne.n	8004b22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d013      	beq.n	8004b9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d74 <HAL_UART_IRQHandler+0x3e0>)
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe f902 	bl	8002d8c <HAL_DMA_Abort_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d016      	beq.n	8004bbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	e00e      	b.n	8004bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f993 	bl	8004eca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e00a      	b.n	8004bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f98f 	bl	8004eca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e006      	b.n	8004bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f98b 	bl	8004eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bba:	e175      	b.n	8004ea8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	bf00      	nop
    return;
 8004bbe:	e173      	b.n	8004ea8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 814f 	bne.w	8004e68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8148 	beq.w	8004e68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8141 	beq.w	8004e68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80b6 	beq.w	8004d78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8145 	beq.w	8004eac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	f080 813e 	bcs.w	8004eac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	f000 8088 	beq.w	8004d54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c70:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1d9      	bne.n	8004c44 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cb4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e1      	bne.n	8004c90 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cf0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cf6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e3      	bne.n	8004ccc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e3      	bne.n	8004d12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd ffe1 	bl	8002d16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8b6 	bl	8004edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d70:	e09c      	b.n	8004eac <HAL_UART_IRQHandler+0x518>
 8004d72:	bf00      	nop
 8004d74:	08005029 	.word	0x08005029
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 808e 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8089 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004db4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3314      	adds	r3, #20
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	623b      	str	r3, [r7, #32]
   return(result);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e3      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0310 	bic.w	r3, r3, #16
 8004e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e40:	61fa      	str	r2, [r7, #28]
 8004e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e3      	bne.n	8004e1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f83b 	bl	8004edc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e66:	e023      	b.n	8004eb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_UART_IRQHandler+0x4f4>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f8e5 	bl	8005050 <UART_Transmit_IT>
    return;
 8004e86:	e014      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f924 	bl	80050ee <UART_EndTransmit_IT>
    return;
 8004ea6:	e004      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004eb0:	bf00      	nop
  }
}
 8004eb2:	37e8      	adds	r7, #232	@ 0xe8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2222      	movs	r2, #34	@ 0x22
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0220 	orr.w	r2, r2, #32
 8004f56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b095      	sub	sp, #84	@ 0x54
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	613b      	str	r3, [r7, #16]
   return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800501e:	bf00      	nop
 8005020:	3754      	adds	r7, #84	@ 0x54
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff ff41 	bl	8004eca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b21      	cmp	r3, #33	@ 0x21
 8005062:	d13e      	bne.n	80050e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506c:	d114      	bne.n	8005098 <UART_Transmit_IT+0x48>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d110      	bne.n	8005098 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	621a      	str	r2, [r3, #32]
 8005096:	e008      	b.n	80050aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6211      	str	r1, [r2, #32]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4619      	mov	r1, r3
 80050b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fed2 	bl	8004eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b08c      	sub	sp, #48	@ 0x30
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b22      	cmp	r3, #34	@ 0x22
 8005130:	f040 80ae 	bne.w	8005290 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513c:	d117      	bne.n	800516e <UART_Receive_IT+0x50>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d113      	bne.n	800516e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515c:	b29a      	uxth	r2, r3
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	@ 0x28
 800516c:	e026      	b.n	80051bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005174:	2300      	movs	r3, #0
 8005176:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d007      	beq.n	8005192 <UART_Receive_IT+0x74>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <UART_Receive_IT+0x82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e008      	b.n	80051b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d15d      	bne.n	800528c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0220 	bic.w	r2, r2, #32
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	2b01      	cmp	r3, #1
 8005214:	d135      	bne.n	8005282 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	613b      	str	r3, [r7, #16]
   return(result);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f023 0310 	bic.w	r3, r3, #16
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523c:	623a      	str	r2, [r7, #32]
 800523e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	69f9      	ldr	r1, [r7, #28]
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	61bb      	str	r3, [r7, #24]
   return(result);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d10a      	bne.n	8005274 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fe2e 	bl	8004edc <HAL_UARTEx_RxEventCallback>
 8005280:	e002      	b.n	8005288 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc fff0 	bl	8002268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e002      	b.n	8005292 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	@ 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80052d6:	f023 030c 	bic.w	r3, r3, #12
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2c      	ldr	r2, [pc, #176]	@ (80053b0 <UART_SetConfig+0x114>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005304:	f7fe fb4c 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	e002      	b.n	8005312 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800530c:	f7fe fb34 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8005310:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009a      	lsls	r2, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	4a22      	ldr	r2, [pc, #136]	@ (80053b4 <UART_SetConfig+0x118>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	0119      	lsls	r1, r3, #4
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f2f3 	udiv	r2, r2, r3
 8005348:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <UART_SetConfig+0x118>)
 800534a:	fba3 0302 	umull	r0, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2064      	movs	r0, #100	@ 0x64
 8005352:	fb00 f303 	mul.w	r3, r0, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	@ 0x32
 800535c:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <UART_SetConfig+0x118>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005368:	4419      	add	r1, r3
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009a      	lsls	r2, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <UART_SetConfig+0x118>)
 8005382:	fba3 0302 	umull	r0, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2064      	movs	r0, #100	@ 0x64
 800538a:	fb00 f303 	mul.w	r3, r0, r3
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	3332      	adds	r3, #50	@ 0x32
 8005394:	4a07      	ldr	r2, [pc, #28]	@ (80053b4 <UART_SetConfig+0x118>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f003 020f 	and.w	r2, r3, #15
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	440a      	add	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40013800 	.word	0x40013800
 80053b4:	51eb851f 	.word	0x51eb851f

080053b8 <memset>:
 80053b8:	4603      	mov	r3, r0
 80053ba:	4402      	add	r2, r0
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	f803 1b01 	strb.w	r1, [r3], #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	2600      	movs	r6, #0
 80053cc:	4d0c      	ldr	r5, [pc, #48]	@ (8005400 <__libc_init_array+0x38>)
 80053ce:	4c0d      	ldr	r4, [pc, #52]	@ (8005404 <__libc_init_array+0x3c>)
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	42a6      	cmp	r6, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	f000 f81a 	bl	8005410 <_init>
 80053dc:	2600      	movs	r6, #0
 80053de:	4d0a      	ldr	r5, [pc, #40]	@ (8005408 <__libc_init_array+0x40>)
 80053e0:	4c0a      	ldr	r4, [pc, #40]	@ (800540c <__libc_init_array+0x44>)
 80053e2:	1b64      	subs	r4, r4, r5
 80053e4:	10a4      	asrs	r4, r4, #2
 80053e6:	42a6      	cmp	r6, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f0:	4798      	blx	r3
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fa:	4798      	blx	r3
 80053fc:	3601      	adds	r6, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	08005454 	.word	0x08005454
 8005404:	08005454 	.word	0x08005454
 8005408:	08005454 	.word	0x08005454
 800540c:	08005458 	.word	0x08005458

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr
